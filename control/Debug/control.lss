
control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002986  00002a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007c  0080007c  00002a36  2**0
                  ALLOC
  3 .stab         00002ac0  00000000  00000000  00002a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000131f  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006817  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006957  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000095fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a795  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 0b 	call	0x1656	; 0x1656 <main>
      8a:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <buzzerInit>:
#include "gpio.h"
#include "buzzer.h"



void buzzerInit (void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <buzzerToggle>:

void buzzerToggle (buzzerState state){
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	00 d0       	rcall	.+0      	; 0xb64 <buzzerToggle+0x6>
     b64:	0f 92       	push	r0
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	89 83       	std	Y+1, r24	; 0x01
	switch (state){
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	3b 83       	std	Y+3, r19	; 0x03
     b74:	2a 83       	std	Y+2, r18	; 0x02
     b76:	8a 81       	ldd	r24, Y+2	; 0x02
     b78:	9b 81       	ldd	r25, Y+3	; 0x03
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	59 f0       	breq	.+22     	; 0xb94 <buzzerToggle+0x36>
     b7e:	2a 81       	ldd	r18, Y+2	; 0x02
     b80:	3b 81       	ldd	r19, Y+3	; 0x03
     b82:	21 30       	cpi	r18, 0x01	; 1
     b84:	31 05       	cpc	r19, r1
     b86:	61 f4       	brne	.+24     	; 0xba0 <buzzerToggle+0x42>
	case(BUZZER_ON):
			GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	41 e0       	ldi	r20, 0x01	; 1
     b8e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
     b92:	0b c0       	rjmp	.+22     	; 0xbaa <buzzerToggle+0x4c>
			break;
	case(BUZZER_OFF):
			GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	67 e0       	ldi	r22, 0x07	; 7
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <buzzerToggle+0x4c>
			break;
	default:
			GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	67 e0       	ldi	r22, 0x07	; 7
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_setupPinDirection>
	}
}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <savePassword>:
 * PARAM1: uint16 address (contains initial I2C address of EEPROM + byte address)
 * PARAM2: uint16 password (contains password info sent via UART)
 *
 */
void savePassword (uint16 addr, uint16 password)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	ee 97       	sbiw	r28, 0x3e	; 62
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	9c af       	std	Y+60, r25	; 0x3c
     bcc:	8b af       	std	Y+59, r24	; 0x3b
     bce:	7e af       	std	Y+62, r23	; 0x3e
     bd0:	6d af       	std	Y+61, r22	; 0x3d
	uint8* ptr_to_password = ((uint8*)&password);
     bd2:	ce 01       	movw	r24, r28
     bd4:	cd 96       	adiw	r24, 0x3d	; 61
     bd6:	9a af       	std	Y+58, r25	; 0x3a
     bd8:	89 af       	std	Y+57, r24	; 0x39

	EEPROM_writeByte(addr, EEPROM_CLEAR);
     bda:	8b ad       	ldd	r24, Y+59	; 0x3b
     bdc:	9c ad       	ldd	r25, Y+60	; 0x3c
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	0e 94 28 0c 	call	0x1850	; 0x1850 <EEPROM_writeByte>
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	a0 e2       	ldi	r26, 0x20	; 32
     bea:	b1 e4       	ldi	r27, 0x41	; 65
     bec:	8d ab       	std	Y+53, r24	; 0x35
     bee:	9e ab       	std	Y+54, r25	; 0x36
     bf0:	af ab       	std	Y+55, r26	; 0x37
     bf2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bf4:	6d a9       	ldd	r22, Y+53	; 0x35
     bf6:	7e a9       	ldd	r23, Y+54	; 0x36
     bf8:	8f a9       	ldd	r24, Y+55	; 0x37
     bfa:	98 ad       	ldd	r25, Y+56	; 0x38
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	4a ef       	ldi	r20, 0xFA	; 250
     c02:	54 e4       	ldi	r21, 0x44	; 68
     c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	89 ab       	std	Y+49, r24	; 0x31
     c0e:	9a ab       	std	Y+50, r25	; 0x32
     c10:	ab ab       	std	Y+51, r26	; 0x33
     c12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c14:	69 a9       	ldd	r22, Y+49	; 0x31
     c16:	7a a9       	ldd	r23, Y+50	; 0x32
     c18:	8b a9       	ldd	r24, Y+51	; 0x33
     c1a:	9c a9       	ldd	r25, Y+52	; 0x34
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	40 e8       	ldi	r20, 0x80	; 128
     c22:	5f e3       	ldi	r21, 0x3F	; 63
     c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c28:	88 23       	and	r24, r24
     c2a:	2c f4       	brge	.+10     	; 0xc36 <savePassword+0x80>
		__ticks = 1;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	98 ab       	std	Y+48, r25	; 0x30
     c32:	8f a7       	std	Y+47, r24	; 0x2f
     c34:	3f c0       	rjmp	.+126    	; 0xcb4 <savePassword+0xfe>
	else if (__tmp > 65535)
     c36:	69 a9       	ldd	r22, Y+49	; 0x31
     c38:	7a a9       	ldd	r23, Y+50	; 0x32
     c3a:	8b a9       	ldd	r24, Y+51	; 0x33
     c3c:	9c a9       	ldd	r25, Y+52	; 0x34
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	3f ef       	ldi	r19, 0xFF	; 255
     c42:	4f e7       	ldi	r20, 0x7F	; 127
     c44:	57 e4       	ldi	r21, 0x47	; 71
     c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c4a:	18 16       	cp	r1, r24
     c4c:	4c f5       	brge	.+82     	; 0xca0 <savePassword+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c4e:	6d a9       	ldd	r22, Y+53	; 0x35
     c50:	7e a9       	ldd	r23, Y+54	; 0x36
     c52:	8f a9       	ldd	r24, Y+55	; 0x37
     c54:	98 ad       	ldd	r25, Y+56	; 0x38
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 e2       	ldi	r20, 0x20	; 32
     c5c:	51 e4       	ldi	r21, 0x41	; 65
     c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	98 ab       	std	Y+48, r25	; 0x30
     c74:	8f a7       	std	Y+47, r24	; 0x2f
     c76:	0f c0       	rjmp	.+30     	; 0xc96 <savePassword+0xe0>
     c78:	88 ec       	ldi	r24, 0xC8	; 200
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	9e a7       	std	Y+46, r25	; 0x2e
     c7e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c80:	8d a5       	ldd	r24, Y+45	; 0x2d
     c82:	9e a5       	ldd	r25, Y+46	; 0x2e
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <savePassword+0xce>
     c88:	9e a7       	std	Y+46, r25	; 0x2e
     c8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c8c:	8f a5       	ldd	r24, Y+47	; 0x2f
     c8e:	98 a9       	ldd	r25, Y+48	; 0x30
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	98 ab       	std	Y+48, r25	; 0x30
     c94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c96:	8f a5       	ldd	r24, Y+47	; 0x2f
     c98:	98 a9       	ldd	r25, Y+48	; 0x30
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	69 f7       	brne	.-38     	; 0xc78 <savePassword+0xc2>
     c9e:	14 c0       	rjmp	.+40     	; 0xcc8 <savePassword+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca0:	69 a9       	ldd	r22, Y+49	; 0x31
     ca2:	7a a9       	ldd	r23, Y+50	; 0x32
     ca4:	8b a9       	ldd	r24, Y+51	; 0x33
     ca6:	9c a9       	ldd	r25, Y+52	; 0x34
     ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	98 ab       	std	Y+48, r25	; 0x30
     cb2:	8f a7       	std	Y+47, r24	; 0x2f
     cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
     cb6:	98 a9       	ldd	r25, Y+48	; 0x30
     cb8:	9c a7       	std	Y+44, r25	; 0x2c
     cba:	8b a7       	std	Y+43, r24	; 0x2b
     cbc:	8b a5       	ldd	r24, Y+43	; 0x2b
     cbe:	9c a5       	ldd	r25, Y+44	; 0x2c
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <savePassword+0x10a>
     cc4:	9c a7       	std	Y+44, r25	; 0x2c
     cc6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	EEPROM_writeByte(addr, *ptr_to_password);
     cc8:	e9 ad       	ldd	r30, Y+57	; 0x39
     cca:	fa ad       	ldd	r31, Y+58	; 0x3a
     ccc:	20 81       	ld	r18, Z
     cce:	8b ad       	ldd	r24, Y+59	; 0x3b
     cd0:	9c ad       	ldd	r25, Y+60	; 0x3c
     cd2:	62 2f       	mov	r22, r18
     cd4:	0e 94 28 0c 	call	0x1850	; 0x1850 <EEPROM_writeByte>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e2       	ldi	r26, 0x20	; 32
     cde:	b1 e4       	ldi	r27, 0x41	; 65
     ce0:	8f a3       	std	Y+39, r24	; 0x27
     ce2:	98 a7       	std	Y+40, r25	; 0x28
     ce4:	a9 a7       	std	Y+41, r26	; 0x29
     ce6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce8:	6f a1       	ldd	r22, Y+39	; 0x27
     cea:	78 a5       	ldd	r23, Y+40	; 0x28
     cec:	89 a5       	ldd	r24, Y+41	; 0x29
     cee:	9a a5       	ldd	r25, Y+42	; 0x2a
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	4a ef       	ldi	r20, 0xFA	; 250
     cf6:	54 e4       	ldi	r21, 0x44	; 68
     cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	8b a3       	std	Y+35, r24	; 0x23
     d02:	9c a3       	std	Y+36, r25	; 0x24
     d04:	ad a3       	std	Y+37, r26	; 0x25
     d06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d08:	6b a1       	ldd	r22, Y+35	; 0x23
     d0a:	7c a1       	ldd	r23, Y+36	; 0x24
     d0c:	8d a1       	ldd	r24, Y+37	; 0x25
     d0e:	9e a1       	ldd	r25, Y+38	; 0x26
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e8       	ldi	r20, 0x80	; 128
     d16:	5f e3       	ldi	r21, 0x3F	; 63
     d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d1c:	88 23       	and	r24, r24
     d1e:	2c f4       	brge	.+10     	; 0xd2a <savePassword+0x174>
		__ticks = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9a a3       	std	Y+34, r25	; 0x22
     d26:	89 a3       	std	Y+33, r24	; 0x21
     d28:	3f c0       	rjmp	.+126    	; 0xda8 <savePassword+0x1f2>
	else if (__tmp > 65535)
     d2a:	6b a1       	ldd	r22, Y+35	; 0x23
     d2c:	7c a1       	ldd	r23, Y+36	; 0x24
     d2e:	8d a1       	ldd	r24, Y+37	; 0x25
     d30:	9e a1       	ldd	r25, Y+38	; 0x26
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	3f ef       	ldi	r19, 0xFF	; 255
     d36:	4f e7       	ldi	r20, 0x7F	; 127
     d38:	57 e4       	ldi	r21, 0x47	; 71
     d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3e:	18 16       	cp	r1, r24
     d40:	4c f5       	brge	.+82     	; 0xd94 <savePassword+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d42:	6f a1       	ldd	r22, Y+39	; 0x27
     d44:	78 a5       	ldd	r23, Y+40	; 0x28
     d46:	89 a5       	ldd	r24, Y+41	; 0x29
     d48:	9a a5       	ldd	r25, Y+42	; 0x2a
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e2       	ldi	r20, 0x20	; 32
     d50:	51 e4       	ldi	r21, 0x41	; 65
     d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	9a a3       	std	Y+34, r25	; 0x22
     d68:	89 a3       	std	Y+33, r24	; 0x21
     d6a:	0f c0       	rjmp	.+30     	; 0xd8a <savePassword+0x1d4>
     d6c:	88 ec       	ldi	r24, 0xC8	; 200
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	98 a3       	std	Y+32, r25	; 0x20
     d72:	8f 8f       	std	Y+31, r24	; 0x1f
     d74:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d76:	98 a1       	ldd	r25, Y+32	; 0x20
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <savePassword+0x1c2>
     d7c:	98 a3       	std	Y+32, r25	; 0x20
     d7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d80:	89 a1       	ldd	r24, Y+33	; 0x21
     d82:	9a a1       	ldd	r25, Y+34	; 0x22
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	9a a3       	std	Y+34, r25	; 0x22
     d88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8a:	89 a1       	ldd	r24, Y+33	; 0x21
     d8c:	9a a1       	ldd	r25, Y+34	; 0x22
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	69 f7       	brne	.-38     	; 0xd6c <savePassword+0x1b6>
     d92:	14 c0       	rjmp	.+40     	; 0xdbc <savePassword+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d94:	6b a1       	ldd	r22, Y+35	; 0x23
     d96:	7c a1       	ldd	r23, Y+36	; 0x24
     d98:	8d a1       	ldd	r24, Y+37	; 0x25
     d9a:	9e a1       	ldd	r25, Y+38	; 0x26
     d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	9a a3       	std	Y+34, r25	; 0x22
     da6:	89 a3       	std	Y+33, r24	; 0x21
     da8:	89 a1       	ldd	r24, Y+33	; 0x21
     daa:	9a a1       	ldd	r25, Y+34	; 0x22
     dac:	9e 8f       	std	Y+30, r25	; 0x1e
     dae:	8d 8f       	std	Y+29, r24	; 0x1d
     db0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <savePassword+0x1fe>
     db8:	9e 8f       	std	Y+30, r25	; 0x1e
     dba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	ptr_to_password++;
     dbc:	89 ad       	ldd	r24, Y+57	; 0x39
     dbe:	9a ad       	ldd	r25, Y+58	; 0x3a
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	9a af       	std	Y+58, r25	; 0x3a
     dc4:	89 af       	std	Y+57, r24	; 0x39
	addr++;
     dc6:	8b ad       	ldd	r24, Y+59	; 0x3b
     dc8:	9c ad       	ldd	r25, Y+60	; 0x3c
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	9c af       	std	Y+60, r25	; 0x3c
     dce:	8b af       	std	Y+59, r24	; 0x3b
	EEPROM_writeByte(addr, EEPROM_CLEAR);
     dd0:	8b ad       	ldd	r24, Y+59	; 0x3b
     dd2:	9c ad       	ldd	r25, Y+60	; 0x3c
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	0e 94 28 0c 	call	0x1850	; 0x1850 <EEPROM_writeByte>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e2       	ldi	r26, 0x20	; 32
     de0:	b1 e4       	ldi	r27, 0x41	; 65
     de2:	89 8f       	std	Y+25, r24	; 0x19
     de4:	9a 8f       	std	Y+26, r25	; 0x1a
     de6:	ab 8f       	std	Y+27, r26	; 0x1b
     de8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dea:	69 8d       	ldd	r22, Y+25	; 0x19
     dec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     df0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	4a ef       	ldi	r20, 0xFA	; 250
     df8:	54 e4       	ldi	r21, 0x44	; 68
     dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	8d 8b       	std	Y+21, r24	; 0x15
     e04:	9e 8b       	std	Y+22, r25	; 0x16
     e06:	af 8b       	std	Y+23, r26	; 0x17
     e08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e0a:	6d 89       	ldd	r22, Y+21	; 0x15
     e0c:	7e 89       	ldd	r23, Y+22	; 0x16
     e0e:	8f 89       	ldd	r24, Y+23	; 0x17
     e10:	98 8d       	ldd	r25, Y+24	; 0x18
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1e:	88 23       	and	r24, r24
     e20:	2c f4       	brge	.+10     	; 0xe2c <savePassword+0x276>
		__ticks = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9c 8b       	std	Y+20, r25	; 0x14
     e28:	8b 8b       	std	Y+19, r24	; 0x13
     e2a:	3f c0       	rjmp	.+126    	; 0xeaa <savePassword+0x2f4>
	else if (__tmp > 65535)
     e2c:	6d 89       	ldd	r22, Y+21	; 0x15
     e2e:	7e 89       	ldd	r23, Y+22	; 0x16
     e30:	8f 89       	ldd	r24, Y+23	; 0x17
     e32:	98 8d       	ldd	r25, Y+24	; 0x18
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e40:	18 16       	cp	r1, r24
     e42:	4c f5       	brge	.+82     	; 0xe96 <savePassword+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e44:	69 8d       	ldd	r22, Y+25	; 0x19
     e46:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e48:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e2       	ldi	r20, 0x20	; 32
     e52:	51 e4       	ldi	r21, 0x41	; 65
     e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9c 8b       	std	Y+20, r25	; 0x14
     e6a:	8b 8b       	std	Y+19, r24	; 0x13
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <savePassword+0x2d6>
     e6e:	88 ec       	ldi	r24, 0xC8	; 200
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9a 8b       	std	Y+18, r25	; 0x12
     e74:	89 8b       	std	Y+17, r24	; 0x11
     e76:	89 89       	ldd	r24, Y+17	; 0x11
     e78:	9a 89       	ldd	r25, Y+18	; 0x12
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <savePassword+0x2c4>
     e7e:	9a 8b       	std	Y+18, r25	; 0x12
     e80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e82:	8b 89       	ldd	r24, Y+19	; 0x13
     e84:	9c 89       	ldd	r25, Y+20	; 0x14
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	9c 8b       	std	Y+20, r25	; 0x14
     e8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8c:	8b 89       	ldd	r24, Y+19	; 0x13
     e8e:	9c 89       	ldd	r25, Y+20	; 0x14
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	69 f7       	brne	.-38     	; 0xe6e <savePassword+0x2b8>
     e94:	14 c0       	rjmp	.+40     	; 0xebe <savePassword+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e96:	6d 89       	ldd	r22, Y+21	; 0x15
     e98:	7e 89       	ldd	r23, Y+22	; 0x16
     e9a:	8f 89       	ldd	r24, Y+23	; 0x17
     e9c:	98 8d       	ldd	r25, Y+24	; 0x18
     e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9c 8b       	std	Y+20, r25	; 0x14
     ea8:	8b 8b       	std	Y+19, r24	; 0x13
     eaa:	8b 89       	ldd	r24, Y+19	; 0x13
     eac:	9c 89       	ldd	r25, Y+20	; 0x14
     eae:	98 8b       	std	Y+16, r25	; 0x10
     eb0:	8f 87       	std	Y+15, r24	; 0x0f
     eb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb4:	98 89       	ldd	r25, Y+16	; 0x10
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <savePassword+0x300>
     eba:	98 8b       	std	Y+16, r25	; 0x10
     ebc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_writeByte(addr, *ptr_to_password);
     ebe:	e9 ad       	ldd	r30, Y+57	; 0x39
     ec0:	fa ad       	ldd	r31, Y+58	; 0x3a
     ec2:	20 81       	ld	r18, Z
     ec4:	8b ad       	ldd	r24, Y+59	; 0x3b
     ec6:	9c ad       	ldd	r25, Y+60	; 0x3c
     ec8:	62 2f       	mov	r22, r18
     eca:	0e 94 28 0c 	call	0x1850	; 0x1850 <EEPROM_writeByte>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a0 e2       	ldi	r26, 0x20	; 32
     ed4:	b1 e4       	ldi	r27, 0x41	; 65
     ed6:	8b 87       	std	Y+11, r24	; 0x0b
     ed8:	9c 87       	std	Y+12, r25	; 0x0c
     eda:	ad 87       	std	Y+13, r26	; 0x0d
     edc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ede:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	4a ef       	ldi	r20, 0xFA	; 250
     eec:	54 e4       	ldi	r21, 0x44	; 68
     eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	8f 83       	std	Y+7, r24	; 0x07
     ef8:	98 87       	std	Y+8, r25	; 0x08
     efa:	a9 87       	std	Y+9, r26	; 0x09
     efc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     efe:	6f 81       	ldd	r22, Y+7	; 0x07
     f00:	78 85       	ldd	r23, Y+8	; 0x08
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	9a 85       	ldd	r25, Y+10	; 0x0a
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e8       	ldi	r20, 0x80	; 128
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f12:	88 23       	and	r24, r24
     f14:	2c f4       	brge	.+10     	; 0xf20 <savePassword+0x36a>
		__ticks = 1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	3f c0       	rjmp	.+126    	; 0xf9e <savePassword+0x3e8>
	else if (__tmp > 65535)
     f20:	6f 81       	ldd	r22, Y+7	; 0x07
     f22:	78 85       	ldd	r23, Y+8	; 0x08
     f24:	89 85       	ldd	r24, Y+9	; 0x09
     f26:	9a 85       	ldd	r25, Y+10	; 0x0a
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	3f ef       	ldi	r19, 0xFF	; 255
     f2c:	4f e7       	ldi	r20, 0x7F	; 127
     f2e:	57 e4       	ldi	r21, 0x47	; 71
     f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f34:	18 16       	cp	r1, r24
     f36:	4c f5       	brge	.+82     	; 0xf8a <savePassword+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f38:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e2       	ldi	r20, 0x20	; 32
     f46:	51 e4       	ldi	r21, 0x41	; 65
     f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	8d 83       	std	Y+5, r24	; 0x05
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <savePassword+0x3ca>
     f62:	88 ec       	ldi	r24, 0xC8	; 200
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <savePassword+0x3b8>
     f72:	9c 83       	std	Y+4, r25	; 0x04
     f74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	9e 83       	std	Y+6, r25	; 0x06
     f7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	69 f7       	brne	.-38     	; 0xf62 <savePassword+0x3ac>
     f88:	14 c0       	rjmp	.+40     	; 0xfb2 <savePassword+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8a:	6f 81       	ldd	r22, Y+7	; 0x07
     f8c:	78 85       	ldd	r23, Y+8	; 0x08
     f8e:	89 85       	ldd	r24, Y+9	; 0x09
     f90:	9a 85       	ldd	r25, Y+10	; 0x0a
     f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	9e 83       	std	Y+6, r25	; 0x06
     f9c:	8d 83       	std	Y+5, r24	; 0x05
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <savePassword+0x3f4>
     fae:	9a 83       	std	Y+2, r25	; 0x02
     fb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
     fb2:	ee 96       	adiw	r28, 0x3e	; 62
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <recivePassword>:
 *
 * for receiving 2-bytes password bytes via UART password in EEPROM
 * RETURN:uint16 password
 *
 */
uint16 recivePassword (void){
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <recivePassword+0x6>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <recivePassword+0x8>
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	uint16 password;
	uint8* ptr_to_password =(uint8*) &password;
     fd0:	ce 01       	movw	r24, r28
     fd2:	03 96       	adiw	r24, 0x03	; 3
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01

	*ptr_to_password = UART_recieveByte();
     fd8:	0e 94 ed 13 	call	0x27da	; 0x27da <UART_recieveByte>
     fdc:	e9 81       	ldd	r30, Y+1	; 0x01
     fde:	fa 81       	ldd	r31, Y+2	; 0x02
     fe0:	80 83       	st	Z, r24
	ptr_to_password++;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
	*ptr_to_password = UART_recieveByte();
     fec:	0e 94 ed 13 	call	0x27da	; 0x27da <UART_recieveByte>
     ff0:	e9 81       	ldd	r30, Y+1	; 0x01
     ff2:	fa 81       	ldd	r31, Y+2	; 0x02
     ff4:	80 83       	st	Z, r24

	return password;
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <checkPassword>:
 * PARAM1: uint16 address (contains initial I2C address of EEPROM + byte address)
 * PARAM2: uint16 password (contains password info sent via UART)
 * RETURN: uint8 boolean value (TRUE on password match, FALSE on mismatch)
 *
 */
uint8 checkPassword (uint16 addr, uint16 password1){
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	a5 97       	sbiw	r28, 0x25	; 37
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	9a a3       	std	Y+34, r25	; 0x22
    101e:	89 a3       	std	Y+33, r24	; 0x21
    1020:	7c a3       	std	Y+36, r23	; 0x24
    1022:	6b a3       	std	Y+35, r22	; 0x23

	uint16 password2;
	uint8* ptr_to_password =(uint8*) &password2;
    1024:	ce 01       	movw	r24, r28
    1026:	4f 96       	adiw	r24, 0x1f	; 31
    1028:	9e 8f       	std	Y+30, r25	; 0x1e
    102a:	8d 8f       	std	Y+29, r24	; 0x1d

	EEPROM_readByte(addr, ptr_to_password);
    102c:	89 a1       	ldd	r24, Y+33	; 0x21
    102e:	9a a1       	ldd	r25, Y+34	; 0x22
    1030:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1032:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1034:	b9 01       	movw	r22, r18
    1036:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <EEPROM_readByte>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a0 e2       	ldi	r26, 0x20	; 32
    1040:	b1 e4       	ldi	r27, 0x41	; 65
    1042:	89 8f       	std	Y+25, r24	; 0x19
    1044:	9a 8f       	std	Y+26, r25	; 0x1a
    1046:	ab 8f       	std	Y+27, r26	; 0x1b
    1048:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104a:	69 8d       	ldd	r22, Y+25	; 0x19
    104c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    104e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1050:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4a ef       	ldi	r20, 0xFA	; 250
    1058:	54 e4       	ldi	r21, 0x44	; 68
    105a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8d 8b       	std	Y+21, r24	; 0x15
    1064:	9e 8b       	std	Y+22, r25	; 0x16
    1066:	af 8b       	std	Y+23, r26	; 0x17
    1068:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    106a:	6d 89       	ldd	r22, Y+21	; 0x15
    106c:	7e 89       	ldd	r23, Y+22	; 0x16
    106e:	8f 89       	ldd	r24, Y+23	; 0x17
    1070:	98 8d       	ldd	r25, Y+24	; 0x18
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e8       	ldi	r20, 0x80	; 128
    1078:	5f e3       	ldi	r21, 0x3F	; 63
    107a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    107e:	88 23       	and	r24, r24
    1080:	2c f4       	brge	.+10     	; 0x108c <checkPassword+0x84>
		__ticks = 1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9c 8b       	std	Y+20, r25	; 0x14
    1088:	8b 8b       	std	Y+19, r24	; 0x13
    108a:	3f c0       	rjmp	.+126    	; 0x110a <checkPassword+0x102>
	else if (__tmp > 65535)
    108c:	6d 89       	ldd	r22, Y+21	; 0x15
    108e:	7e 89       	ldd	r23, Y+22	; 0x16
    1090:	8f 89       	ldd	r24, Y+23	; 0x17
    1092:	98 8d       	ldd	r25, Y+24	; 0x18
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	4f e7       	ldi	r20, 0x7F	; 127
    109a:	57 e4       	ldi	r21, 0x47	; 71
    109c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10a0:	18 16       	cp	r1, r24
    10a2:	4c f5       	brge	.+82     	; 0x10f6 <checkPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a4:	69 8d       	ldd	r22, Y+25	; 0x19
    10a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e2       	ldi	r20, 0x20	; 32
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9c 8b       	std	Y+20, r25	; 0x14
    10ca:	8b 8b       	std	Y+19, r24	; 0x13
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <checkPassword+0xe4>
    10ce:	88 ec       	ldi	r24, 0xC8	; 200
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9a 8b       	std	Y+18, r25	; 0x12
    10d4:	89 8b       	std	Y+17, r24	; 0x11
    10d6:	89 89       	ldd	r24, Y+17	; 0x11
    10d8:	9a 89       	ldd	r25, Y+18	; 0x12
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <checkPassword+0xd2>
    10de:	9a 8b       	std	Y+18, r25	; 0x12
    10e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	8b 89       	ldd	r24, Y+19	; 0x13
    10e4:	9c 89       	ldd	r25, Y+20	; 0x14
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	9c 8b       	std	Y+20, r25	; 0x14
    10ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	8b 89       	ldd	r24, Y+19	; 0x13
    10ee:	9c 89       	ldd	r25, Y+20	; 0x14
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	69 f7       	brne	.-38     	; 0x10ce <checkPassword+0xc6>
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <checkPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f6:	6d 89       	ldd	r22, Y+21	; 0x15
    10f8:	7e 89       	ldd	r23, Y+22	; 0x16
    10fa:	8f 89       	ldd	r24, Y+23	; 0x17
    10fc:	98 8d       	ldd	r25, Y+24	; 0x18
    10fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9c 8b       	std	Y+20, r25	; 0x14
    1108:	8b 8b       	std	Y+19, r24	; 0x13
    110a:	8b 89       	ldd	r24, Y+19	; 0x13
    110c:	9c 89       	ldd	r25, Y+20	; 0x14
    110e:	98 8b       	std	Y+16, r25	; 0x10
    1110:	8f 87       	std	Y+15, r24	; 0x0f
    1112:	8f 85       	ldd	r24, Y+15	; 0x0f
    1114:	98 89       	ldd	r25, Y+16	; 0x10
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <checkPassword+0x10e>
    111a:	98 8b       	std	Y+16, r25	; 0x10
    111c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	ptr_to_password++;
    111e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1120:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	9e 8f       	std	Y+30, r25	; 0x1e
    1126:	8d 8f       	std	Y+29, r24	; 0x1d
	addr++;
    1128:	89 a1       	ldd	r24, Y+33	; 0x21
    112a:	9a a1       	ldd	r25, Y+34	; 0x22
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	9a a3       	std	Y+34, r25	; 0x22
    1130:	89 a3       	std	Y+33, r24	; 0x21
	EEPROM_readByte(addr, ptr_to_password);
    1132:	89 a1       	ldd	r24, Y+33	; 0x21
    1134:	9a a1       	ldd	r25, Y+34	; 0x22
    1136:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1138:	3e 8d       	ldd	r19, Y+30	; 0x1e
    113a:	b9 01       	movw	r22, r18
    113c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <EEPROM_readByte>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a0 e2       	ldi	r26, 0x20	; 32
    1146:	b1 e4       	ldi	r27, 0x41	; 65
    1148:	8b 87       	std	Y+11, r24	; 0x0b
    114a:	9c 87       	std	Y+12, r25	; 0x0c
    114c:	ad 87       	std	Y+13, r26	; 0x0d
    114e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1150:	6b 85       	ldd	r22, Y+11	; 0x0b
    1152:	7c 85       	ldd	r23, Y+12	; 0x0c
    1154:	8d 85       	ldd	r24, Y+13	; 0x0d
    1156:	9e 85       	ldd	r25, Y+14	; 0x0e
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4a ef       	ldi	r20, 0xFA	; 250
    115e:	54 e4       	ldi	r21, 0x44	; 68
    1160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	8f 83       	std	Y+7, r24	; 0x07
    116a:	98 87       	std	Y+8, r25	; 0x08
    116c:	a9 87       	std	Y+9, r26	; 0x09
    116e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f e3       	ldi	r21, 0x3F	; 63
    1180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	2c f4       	brge	.+10     	; 0x1192 <checkPassword+0x18a>
		__ticks = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	8d 83       	std	Y+5, r24	; 0x05
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <checkPassword+0x208>
	else if (__tmp > 65535)
    1192:	6f 81       	ldd	r22, Y+7	; 0x07
    1194:	78 85       	ldd	r23, Y+8	; 0x08
    1196:	89 85       	ldd	r24, Y+9	; 0x09
    1198:	9a 85       	ldd	r25, Y+10	; 0x0a
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	3f ef       	ldi	r19, 0xFF	; 255
    119e:	4f e7       	ldi	r20, 0x7F	; 127
    11a0:	57 e4       	ldi	r21, 0x47	; 71
    11a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a6:	18 16       	cp	r1, r24
    11a8:	4c f5       	brge	.+82     	; 0x11fc <checkPassword+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	51 e4       	ldi	r21, 0x41	; 65
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	9e 83       	std	Y+6, r25	; 0x06
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <checkPassword+0x1ea>
    11d4:	88 ec       	ldi	r24, 0xC8	; 200
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9c 83       	std	Y+4, r25	; 0x04
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <checkPassword+0x1d8>
    11e4:	9c 83       	std	Y+4, r25	; 0x04
    11e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	9e 83       	std	Y+6, r25	; 0x06
    11f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <checkPassword+0x1cc>
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <checkPassword+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	6f 81       	ldd	r22, Y+7	; 0x07
    11fe:	78 85       	ldd	r23, Y+8	; 0x08
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9e 83       	std	Y+6, r25	; 0x06
    120e:	8d 83       	std	Y+5, r24	; 0x05
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <checkPassword+0x214>
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	if (password1 == password2){
    1224:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1226:	38 a1       	ldd	r19, Y+32	; 0x20
    1228:	8b a1       	ldd	r24, Y+35	; 0x23
    122a:	9c a1       	ldd	r25, Y+36	; 0x24
    122c:	82 17       	cp	r24, r18
    122e:	93 07       	cpc	r25, r19
    1230:	19 f4       	brne	.+6      	; 0x1238 <checkPassword+0x230>
		return TRUE;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	8d a3       	std	Y+37, r24	; 0x25
    1236:	01 c0       	rjmp	.+2      	; 0x123a <checkPassword+0x232>
	}
	else{
		return FALSE;
    1238:	1d a2       	std	Y+37, r1	; 0x25
    123a:	8d a1       	ldd	r24, Y+37	; 0x25
	}
}
    123c:	a5 96       	adiw	r28, 0x25	; 37
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <openDoor>:
/* open door function
 *
 * for controlling DC_Motor sequence to open the door (15 seconds clock-wise, 3 seconds stop, 15 seconds anti_clockwise)
 *
 */
void openDoor (void){
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	aa 97       	sbiw	r28, 0x2a	; 42
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
	DcMotor_Rotate(CW, FULL_SPEED);
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	6f ef       	ldi	r22, 0xFF	; 255
    1266:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DcMotor_Rotate>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e6       	ldi	r25, 0x60	; 96
    126e:	aa e6       	ldi	r26, 0x6A	; 106
    1270:	b6 e4       	ldi	r27, 0x46	; 70
    1272:	8f a3       	std	Y+39, r24	; 0x27
    1274:	98 a7       	std	Y+40, r25	; 0x28
    1276:	a9 a7       	std	Y+41, r26	; 0x29
    1278:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127a:	6f a1       	ldd	r22, Y+39	; 0x27
    127c:	78 a5       	ldd	r23, Y+40	; 0x28
    127e:	89 a5       	ldd	r24, Y+41	; 0x29
    1280:	9a a5       	ldd	r25, Y+42	; 0x2a
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	4a ef       	ldi	r20, 0xFA	; 250
    1288:	54 e4       	ldi	r21, 0x44	; 68
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	8b a3       	std	Y+35, r24	; 0x23
    1294:	9c a3       	std	Y+36, r25	; 0x24
    1296:	ad a3       	std	Y+37, r26	; 0x25
    1298:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    129a:	6b a1       	ldd	r22, Y+35	; 0x23
    129c:	7c a1       	ldd	r23, Y+36	; 0x24
    129e:	8d a1       	ldd	r24, Y+37	; 0x25
    12a0:	9e a1       	ldd	r25, Y+38	; 0x26
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e8       	ldi	r20, 0x80	; 128
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	2c f4       	brge	.+10     	; 0x12bc <openDoor+0x6e>
		__ticks = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9a a3       	std	Y+34, r25	; 0x22
    12b8:	89 a3       	std	Y+33, r24	; 0x21
    12ba:	3f c0       	rjmp	.+126    	; 0x133a <openDoor+0xec>
	else if (__tmp > 65535)
    12bc:	6b a1       	ldd	r22, Y+35	; 0x23
    12be:	7c a1       	ldd	r23, Y+36	; 0x24
    12c0:	8d a1       	ldd	r24, Y+37	; 0x25
    12c2:	9e a1       	ldd	r25, Y+38	; 0x26
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	57 e4       	ldi	r21, 0x47	; 71
    12cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	4c f5       	brge	.+82     	; 0x1326 <openDoor+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d4:	6f a1       	ldd	r22, Y+39	; 0x27
    12d6:	78 a5       	ldd	r23, Y+40	; 0x28
    12d8:	89 a5       	ldd	r24, Y+41	; 0x29
    12da:	9a a5       	ldd	r25, Y+42	; 0x2a
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9a a3       	std	Y+34, r25	; 0x22
    12fa:	89 a3       	std	Y+33, r24	; 0x21
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <openDoor+0xce>
    12fe:	88 ec       	ldi	r24, 0xC8	; 200
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	98 a3       	std	Y+32, r25	; 0x20
    1304:	8f 8f       	std	Y+31, r24	; 0x1f
    1306:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1308:	98 a1       	ldd	r25, Y+32	; 0x20
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <openDoor+0xbc>
    130e:	98 a3       	std	Y+32, r25	; 0x20
    1310:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	89 a1       	ldd	r24, Y+33	; 0x21
    1314:	9a a1       	ldd	r25, Y+34	; 0x22
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	9a a3       	std	Y+34, r25	; 0x22
    131a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131c:	89 a1       	ldd	r24, Y+33	; 0x21
    131e:	9a a1       	ldd	r25, Y+34	; 0x22
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	69 f7       	brne	.-38     	; 0x12fe <openDoor+0xb0>
    1324:	14 c0       	rjmp	.+40     	; 0x134e <openDoor+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1326:	6b a1       	ldd	r22, Y+35	; 0x23
    1328:	7c a1       	ldd	r23, Y+36	; 0x24
    132a:	8d a1       	ldd	r24, Y+37	; 0x25
    132c:	9e a1       	ldd	r25, Y+38	; 0x26
    132e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9a a3       	std	Y+34, r25	; 0x22
    1338:	89 a3       	std	Y+33, r24	; 0x21
    133a:	89 a1       	ldd	r24, Y+33	; 0x21
    133c:	9a a1       	ldd	r25, Y+34	; 0x22
    133e:	9e 8f       	std	Y+30, r25	; 0x1e
    1340:	8d 8f       	std	Y+29, r24	; 0x1d
    1342:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1344:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <openDoor+0xf8>
    134a:	9e 8f       	std	Y+30, r25	; 0x1e
    134c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(15000);
	DcMotor_Rotate(STOP, HALT);
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DcMotor_Rotate>
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e8       	ldi	r25, 0x80	; 128
    135a:	ab e3       	ldi	r26, 0x3B	; 59
    135c:	b5 e4       	ldi	r27, 0x45	; 69
    135e:	89 8f       	std	Y+25, r24	; 0x19
    1360:	9a 8f       	std	Y+26, r25	; 0x1a
    1362:	ab 8f       	std	Y+27, r26	; 0x1b
    1364:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1366:	69 8d       	ldd	r22, Y+25	; 0x19
    1368:	7a 8d       	ldd	r23, Y+26	; 0x1a
    136a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    136c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	4a ef       	ldi	r20, 0xFA	; 250
    1374:	54 e4       	ldi	r21, 0x44	; 68
    1376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	8d 8b       	std	Y+21, r24	; 0x15
    1380:	9e 8b       	std	Y+22, r25	; 0x16
    1382:	af 8b       	std	Y+23, r26	; 0x17
    1384:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1386:	6d 89       	ldd	r22, Y+21	; 0x15
    1388:	7e 89       	ldd	r23, Y+22	; 0x16
    138a:	8f 89       	ldd	r24, Y+23	; 0x17
    138c:	98 8d       	ldd	r25, Y+24	; 0x18
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e8       	ldi	r20, 0x80	; 128
    1394:	5f e3       	ldi	r21, 0x3F	; 63
    1396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139a:	88 23       	and	r24, r24
    139c:	2c f4       	brge	.+10     	; 0x13a8 <openDoor+0x15a>
		__ticks = 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	9c 8b       	std	Y+20, r25	; 0x14
    13a4:	8b 8b       	std	Y+19, r24	; 0x13
    13a6:	3f c0       	rjmp	.+126    	; 0x1426 <openDoor+0x1d8>
	else if (__tmp > 65535)
    13a8:	6d 89       	ldd	r22, Y+21	; 0x15
    13aa:	7e 89       	ldd	r23, Y+22	; 0x16
    13ac:	8f 89       	ldd	r24, Y+23	; 0x17
    13ae:	98 8d       	ldd	r25, Y+24	; 0x18
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	3f ef       	ldi	r19, 0xFF	; 255
    13b4:	4f e7       	ldi	r20, 0x7F	; 127
    13b6:	57 e4       	ldi	r21, 0x47	; 71
    13b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13bc:	18 16       	cp	r1, r24
    13be:	4c f5       	brge	.+82     	; 0x1412 <openDoor+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c0:	69 8d       	ldd	r22, Y+25	; 0x19
    13c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e2       	ldi	r20, 0x20	; 32
    13ce:	51 e4       	ldi	r21, 0x41	; 65
    13d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9c 8b       	std	Y+20, r25	; 0x14
    13e6:	8b 8b       	std	Y+19, r24	; 0x13
    13e8:	0f c0       	rjmp	.+30     	; 0x1408 <openDoor+0x1ba>
    13ea:	88 ec       	ldi	r24, 0xC8	; 200
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9a 8b       	std	Y+18, r25	; 0x12
    13f0:	89 8b       	std	Y+17, r24	; 0x11
    13f2:	89 89       	ldd	r24, Y+17	; 0x11
    13f4:	9a 89       	ldd	r25, Y+18	; 0x12
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <openDoor+0x1a8>
    13fa:	9a 8b       	std	Y+18, r25	; 0x12
    13fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1400:	9c 89       	ldd	r25, Y+20	; 0x14
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	9c 8b       	std	Y+20, r25	; 0x14
    1406:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1408:	8b 89       	ldd	r24, Y+19	; 0x13
    140a:	9c 89       	ldd	r25, Y+20	; 0x14
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	69 f7       	brne	.-38     	; 0x13ea <openDoor+0x19c>
    1410:	14 c0       	rjmp	.+40     	; 0x143a <openDoor+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1412:	6d 89       	ldd	r22, Y+21	; 0x15
    1414:	7e 89       	ldd	r23, Y+22	; 0x16
    1416:	8f 89       	ldd	r24, Y+23	; 0x17
    1418:	98 8d       	ldd	r25, Y+24	; 0x18
    141a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	9c 8b       	std	Y+20, r25	; 0x14
    1424:	8b 8b       	std	Y+19, r24	; 0x13
    1426:	8b 89       	ldd	r24, Y+19	; 0x13
    1428:	9c 89       	ldd	r25, Y+20	; 0x14
    142a:	98 8b       	std	Y+16, r25	; 0x10
    142c:	8f 87       	std	Y+15, r24	; 0x0f
    142e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1430:	98 89       	ldd	r25, Y+16	; 0x10
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <openDoor+0x1e4>
    1436:	98 8b       	std	Y+16, r25	; 0x10
    1438:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3000);
	DcMotor_Rotate(A_CW, FULL_SPEED);
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	6f ef       	ldi	r22, 0xFF	; 255
    143e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DcMotor_Rotate>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e6       	ldi	r25, 0x60	; 96
    1446:	aa e6       	ldi	r26, 0x6A	; 106
    1448:	b6 e4       	ldi	r27, 0x46	; 70
    144a:	8b 87       	std	Y+11, r24	; 0x0b
    144c:	9c 87       	std	Y+12, r25	; 0x0c
    144e:	ad 87       	std	Y+13, r26	; 0x0d
    1450:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1452:	6b 85       	ldd	r22, Y+11	; 0x0b
    1454:	7c 85       	ldd	r23, Y+12	; 0x0c
    1456:	8d 85       	ldd	r24, Y+13	; 0x0d
    1458:	9e 85       	ldd	r25, Y+14	; 0x0e
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	4a ef       	ldi	r20, 0xFA	; 250
    1460:	54 e4       	ldi	r21, 0x44	; 68
    1462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	8f 83       	std	Y+7, r24	; 0x07
    146c:	98 87       	std	Y+8, r25	; 0x08
    146e:	a9 87       	std	Y+9, r26	; 0x09
    1470:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1472:	6f 81       	ldd	r22, Y+7	; 0x07
    1474:	78 85       	ldd	r23, Y+8	; 0x08
    1476:	89 85       	ldd	r24, Y+9	; 0x09
    1478:	9a 85       	ldd	r25, Y+10	; 0x0a
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e8       	ldi	r20, 0x80	; 128
    1480:	5f e3       	ldi	r21, 0x3F	; 63
    1482:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1486:	88 23       	and	r24, r24
    1488:	2c f4       	brge	.+10     	; 0x1494 <openDoor+0x246>
		__ticks = 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	3f c0       	rjmp	.+126    	; 0x1512 <openDoor+0x2c4>
	else if (__tmp > 65535)
    1494:	6f 81       	ldd	r22, Y+7	; 0x07
    1496:	78 85       	ldd	r23, Y+8	; 0x08
    1498:	89 85       	ldd	r24, Y+9	; 0x09
    149a:	9a 85       	ldd	r25, Y+10	; 0x0a
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	3f ef       	ldi	r19, 0xFF	; 255
    14a0:	4f e7       	ldi	r20, 0x7F	; 127
    14a2:	57 e4       	ldi	r21, 0x47	; 71
    14a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	4c f5       	brge	.+82     	; 0x14fe <openDoor+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e2       	ldi	r20, 0x20	; 32
    14ba:	51 e4       	ldi	r21, 0x41	; 65
    14bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8d 83       	std	Y+5, r24	; 0x05
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <openDoor+0x2a6>
    14d6:	88 ec       	ldi	r24, 0xC8	; 200
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9c 83       	std	Y+4, r25	; 0x04
    14dc:	8b 83       	std	Y+3, r24	; 0x03
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <openDoor+0x294>
    14e6:	9c 83       	std	Y+4, r25	; 0x04
    14e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	69 f7       	brne	.-38     	; 0x14d6 <openDoor+0x288>
    14fc:	14 c0       	rjmp	.+40     	; 0x1526 <openDoor+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1500:	78 85       	ldd	r23, Y+8	; 0x08
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	9e 83       	std	Y+6, r25	; 0x06
    1510:	8d 83       	std	Y+5, r24	; 0x05
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	9e 81       	ldd	r25, Y+6	; 0x06
    1516:	9a 83       	std	Y+2, r25	; 0x02
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <openDoor+0x2d0>
    1522:	9a 83       	std	Y+2, r25	; 0x02
    1524:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15000);
	DcMotor_Rotate(STOP, HALT);
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DcMotor_Rotate>
}
    152e:	aa 96       	adiw	r28, 0x2a	; 42
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <errorAction>:
 *
 * runs in case of error
 * toggles the buzzer on for 60 seconds
 *
 */
void errorAction (void){
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	2e 97       	sbiw	r28, 0x0e	; 14
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
	buzzerToggle(BUZZER_ON);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	0e 94 af 05 	call	0xb5e	; 0xb5e <buzzerToggle>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e8       	ldi	r25, 0x80	; 128
    155e:	ab eb       	ldi	r26, 0xBB	; 187
    1560:	b5 e4       	ldi	r27, 0x45	; 69
    1562:	8b 87       	std	Y+11, r24	; 0x0b
    1564:	9c 87       	std	Y+12, r25	; 0x0c
    1566:	ad 87       	std	Y+13, r26	; 0x0d
    1568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156a:	6b 85       	ldd	r22, Y+11	; 0x0b
    156c:	7c 85       	ldd	r23, Y+12	; 0x0c
    156e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1570:	9e 85       	ldd	r25, Y+14	; 0x0e
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4a ef       	ldi	r20, 0xFA	; 250
    1578:	54 e4       	ldi	r21, 0x44	; 68
    157a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	8f 83       	std	Y+7, r24	; 0x07
    1584:	98 87       	std	Y+8, r25	; 0x08
    1586:	a9 87       	std	Y+9, r26	; 0x09
    1588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159e:	88 23       	and	r24, r24
    15a0:	2c f4       	brge	.+10     	; 0x15ac <errorAction+0x6c>
		__ticks = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	3f c0       	rjmp	.+126    	; 0x162a <errorAction+0xea>
	else if (__tmp > 65535)
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	3f ef       	ldi	r19, 0xFF	; 255
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	57 e4       	ldi	r21, 0x47	; 71
    15bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	4c f5       	brge	.+82     	; 0x1616 <errorAction+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <errorAction+0xcc>
    15ee:	88 ec       	ldi	r24, 0xC8	; 200
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	8b 83       	std	Y+3, r24	; 0x03
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <errorAction+0xba>
    15fe:	9c 83       	std	Y+4, r25	; 0x04
    1600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	69 f7       	brne	.-38     	; 0x15ee <errorAction+0xae>
    1614:	14 c0       	rjmp	.+40     	; 0x163e <errorAction+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1616:	6f 81       	ldd	r22, Y+7	; 0x07
    1618:	78 85       	ldd	r23, Y+8	; 0x08
    161a:	89 85       	ldd	r24, Y+9	; 0x09
    161c:	9a 85       	ldd	r25, Y+10	; 0x0a
    161e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <errorAction+0xf6>
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(6000);
	buzzerToggle(BUZZER_OFF);
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0e 94 af 05 	call	0xb5e	; 0xb5e <buzzerToggle>
}
    1644:	2e 96       	adiw	r28, 0x0e	; 14
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <main>:


int main (void){
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <main+0x6>
    165c:	00 d0       	rcall	.+0      	; 0x165e <main+0x8>
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Init();
    1664:	0e 94 b8 0b 	call	0x1770	; 0x1770 <DcMotor_Init>
	buzzerInit();
    1668:	0e 94 a3 05 	call	0xb46	; 0xb46 <buzzerInit>
	UART_init(&config_control);
    166c:	8a e6       	ldi	r24, 0x6A	; 106
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 5f 12 	call	0x24be	; 0x24be <UART_init>
	TWI_init(&twi_config);
    1674:	81 e7       	ldi	r24, 0x71	; 113
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <TWI_init>

	uint16 uart_buffer = 0;
    167c:	1b 82       	std	Y+3, r1	; 0x03
    167e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 i =0;
    1680:	19 82       	std	Y+1, r1	; 0x01

	while (TRUE){
		uart_buffer = UART_recieveByte();
    1682:	0e 94 ed 13 	call	0x27da	; 0x27da <UART_recieveByte>
    1686:	88 2f       	mov	r24, r24
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9b 83       	std	Y+3, r25	; 0x03
    168c:	8a 83       	std	Y+2, r24	; 0x02
		switch(uart_buffer){
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	9b 81       	ldd	r25, Y+3	; 0x03
    1692:	9d 83       	std	Y+5, r25	; 0x05
    1694:	8c 83       	std	Y+4, r24	; 0x04
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	9d 81       	ldd	r25, Y+5	; 0x05
    169a:	8f 30       	cpi	r24, 0x0F	; 15
    169c:	91 05       	cpc	r25, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <main+0x4c>
    16a0:	64 c0       	rjmp	.+200    	; 0x176a <main+0x114>
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	9d 81       	ldd	r25, Y+5	; 0x05
    16a6:	80 31       	cpi	r24, 0x10	; 16
    16a8:	91 05       	cpc	r25, r1
    16aa:	30 f4       	brcc	.+12     	; 0x16b8 <main+0x62>
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	8a 30       	cpi	r24, 0x0A	; 10
    16b2:	91 05       	cpc	r25, r1
    16b4:	61 f0       	breq	.+24     	; 0x16ce <main+0x78>
    16b6:	e5 cf       	rjmp	.-54     	; 0x1682 <main+0x2c>
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	8b 32       	cpi	r24, 0x2B	; 43
    16be:	91 05       	cpc	r25, r1
    16c0:	a1 f0       	breq	.+40     	; 0x16ea <main+0x94>
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	8d 32       	cpi	r24, 0x2D	; 45
    16c8:	91 05       	cpc	r25, r1
    16ca:	81 f1       	breq	.+96     	; 0x172c <main+0xd6>
    16cc:	da cf       	rjmp	.-76     	; 0x1682 <main+0x2c>
		case RECIEVE_PASSWORD:
			uart_buffer = recivePassword();
    16ce:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <recivePassword>
    16d2:	9b 83       	std	Y+3, r25	; 0x03
    16d4:	8a 83       	std	Y+2, r24	; 0x02
			savePassword(eeprom_address, uart_buffer);
    16d6:	80 91 68 00 	lds	r24, 0x0068
    16da:	90 91 69 00 	lds	r25, 0x0069
    16de:	2a 81       	ldd	r18, Y+2	; 0x02
    16e0:	3b 81       	ldd	r19, Y+3	; 0x03
    16e2:	b9 01       	movw	r22, r18
    16e4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <savePassword>
    16e8:	cc cf       	rjmp	.-104    	; 0x1682 <main+0x2c>
		break;

		case OPEN_DOOR:
			for (i =0; i<3; i++){
    16ea:	19 82       	std	Y+1, r1	; 0x01
    16ec:	1b c0       	rjmp	.+54     	; 0x1724 <main+0xce>
				uart_buffer = recivePassword();
    16ee:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <recivePassword>
    16f2:	9b 83       	std	Y+3, r25	; 0x03
    16f4:	8a 83       	std	Y+2, r24	; 0x02
				if (checkPassword(eeprom_address, uart_buffer)){
    16f6:	80 91 68 00 	lds	r24, 0x0068
    16fa:	90 91 69 00 	lds	r25, 0x0069
    16fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1700:	3b 81       	ldd	r19, Y+3	; 0x03
    1702:	b9 01       	movw	r22, r18
    1704:	0e 94 04 08 	call	0x1008	; 0x1008 <checkPassword>
    1708:	88 23       	and	r24, r24
    170a:	31 f0       	breq	.+12     	; 0x1718 <main+0xc2>
					openDoor();
    170c:	0e 94 27 09 	call	0x124e	; 0x124e <openDoor>
					UART_sendByte(ACKNOWLEDGE);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	0e 94 d6 13 	call	0x27ac	; 0x27ac <UART_sendByte>
    1716:	b5 cf       	rjmp	.-150    	; 0x1682 <main+0x2c>
					break;
				}
				else{
					UART_sendByte(WRONG_PASS);
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <UART_sendByte>
			uart_buffer = recivePassword();
			savePassword(eeprom_address, uart_buffer);
		break;

		case OPEN_DOOR:
			for (i =0; i<3; i++){
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	83 30       	cpi	r24, 0x03	; 3
    1728:	10 f3       	brcs	.-60     	; 0x16ee <main+0x98>
    172a:	ab cf       	rjmp	.-170    	; 0x1682 <main+0x2c>
					UART_sendByte(WRONG_PASS);
				}
			}
		break;
		case CHANGE_PASSWORD:
			for (i =0; i<3; i++){
    172c:	19 82       	std	Y+1, r1	; 0x01
    172e:	19 c0       	rjmp	.+50     	; 0x1762 <main+0x10c>
				uart_buffer = recivePassword();
    1730:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <recivePassword>
    1734:	9b 83       	std	Y+3, r25	; 0x03
    1736:	8a 83       	std	Y+2, r24	; 0x02
				if (checkPassword(eeprom_address, uart_buffer)){
    1738:	80 91 68 00 	lds	r24, 0x0068
    173c:	90 91 69 00 	lds	r25, 0x0069
    1740:	2a 81       	ldd	r18, Y+2	; 0x02
    1742:	3b 81       	ldd	r19, Y+3	; 0x03
    1744:	b9 01       	movw	r22, r18
    1746:	0e 94 04 08 	call	0x1008	; 0x1008 <checkPassword>
    174a:	88 23       	and	r24, r24
    174c:	21 f0       	breq	.+8      	; 0x1756 <main+0x100>
					UART_sendByte(ACKNOWLEDGE);
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	0e 94 d6 13 	call	0x27ac	; 0x27ac <UART_sendByte>
    1754:	96 cf       	rjmp	.-212    	; 0x1682 <main+0x2c>
					break;
				}
				else{
					UART_sendByte(WRONG_PASS);
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	0e 94 d6 13 	call	0x27ac	; 0x27ac <UART_sendByte>
					UART_sendByte(WRONG_PASS);
				}
			}
		break;
		case CHANGE_PASSWORD:
			for (i =0; i<3; i++){
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	8f 5f       	subi	r24, 0xFF	; 255
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	83 30       	cpi	r24, 0x03	; 3
    1766:	20 f3       	brcs	.-56     	; 0x1730 <main+0xda>
    1768:	8c cf       	rjmp	.-232    	; 0x1682 <main+0x2c>
				}
			}
		break;

		case TOO_MANY_ATTEMPTS:
			errorAction();
    176a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <errorAction>
    176e:	89 cf       	rjmp	.-238    	; 0x1682 <main+0x2c>

00001770 <DcMotor_Init>:
#include "pwm.h"



void DcMotor_Init(void)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection( PORTB_ID,PIN1_ID, PIN_OUTPUT);
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_setupPinDirection>
	GPIO_setupPinDirection( PORTB_ID,PIN0_ID, PIN_OUTPUT);
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	41 e0       	ldi	r20, 0x01	; 1
    1788:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_setupPinDirection>


	GPIO_writePin (PORTB_ID, PIN0_ID, LOGIC_LOW);
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
	GPIO_writePin (PORTB_ID, PIN1_ID, LOGIC_LOW);
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	61 e0       	ldi	r22, 0x01	; 1
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
	GPIO_writePin (PORTB_ID, PIN3_ID, LOGIC_LOW);
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	63 e0       	ldi	r22, 0x03	; 3
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <DcMotor_Rotate+0x6>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <DcMotor_Rotate+0x8>
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	6a 83       	std	Y+2, r22	; 0x02
	switch (state)
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	3c 83       	std	Y+4, r19	; 0x04
    17c8:	2b 83       	std	Y+3, r18	; 0x03
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	91 05       	cpc	r25, r1
    17d2:	a1 f0       	breq	.+40     	; 0x17fc <DcMotor_Rotate+0x4c>
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	31 05       	cpc	r19, r1
    17dc:	d1 f0       	breq	.+52     	; 0x1812 <DcMotor_Rotate+0x62>
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	09 f5       	brne	.+66     	; 0x1828 <DcMotor_Rotate+0x78>
	{
		case (STOP):
				GPIO_writePin (PORTB_ID, PIN0_ID, LOGIC_LOW);
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
				GPIO_writePin (PORTB_ID, PIN1_ID, LOGIC_LOW);
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
    17fa:	20 c0       	rjmp	.+64     	; 0x183c <DcMotor_Rotate+0x8c>
				break;
		case (CW):
				GPIO_writePin (PORTB_ID, PIN0_ID, LOGIC_HIGH);
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
				GPIO_writePin (PORTB_ID, PIN1_ID, LOGIC_LOW);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	40 e0       	ldi	r20, 0x00	; 0
    180c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
    1810:	15 c0       	rjmp	.+42     	; 0x183c <DcMotor_Rotate+0x8c>
				break;
		case (A_CW):
				GPIO_writePin (PORTB_ID, PIN0_ID, LOGIC_LOW);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
				GPIO_writePin (PORTB_ID, PIN1_ID, LOGIC_HIGH);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
    1826:	0a c0       	rjmp	.+20     	; 0x183c <DcMotor_Rotate+0x8c>
				break;
		default:
				GPIO_writePin (PORTB_ID, PIN0_ID, LOGIC_LOW);
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
				GPIO_writePin (PORTB_ID, PIN1_ID, LOGIC_LOW);
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePin>
	}


	Timer0_PWM_Init(speed);
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	0e 94 07 10 	call	0x200e	; 0x200e <Timer0_PWM_Init>
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <EEPROM_writeByte>:




uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	00 d0       	rcall	.+0      	; 0x1856 <EEPROM_writeByte+0x6>
    1856:	00 d0       	rcall	.+0      	; 0x1858 <EEPROM_writeByte+0x8>
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	9a 83       	std	Y+2, r25	; 0x02
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1862:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1866:	0e 94 50 12 	call	0x24a0	; 0x24a0 <TWI_getStatus>
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	11 f0       	breq	.+4      	; 0x1872 <EEPROM_writeByte+0x22>
        return ERROR;
    186e:	1c 82       	std	Y+4, r1	; 0x04
    1870:	28 c0       	rjmp	.+80     	; 0x18c2 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	80 70       	andi	r24, 0x00	; 0
    1878:	97 70       	andi	r25, 0x07	; 7
    187a:	88 0f       	add	r24, r24
    187c:	89 2f       	mov	r24, r25
    187e:	88 1f       	adc	r24, r24
    1880:	99 0b       	sbc	r25, r25
    1882:	91 95       	neg	r25
    1884:	80 6a       	ori	r24, 0xA0	; 160
    1886:	0e 94 13 12 	call	0x2426	; 0x2426 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    188a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <TWI_getStatus>
    188e:	88 31       	cpi	r24, 0x18	; 24
    1890:	11 f0       	breq	.+4      	; 0x1896 <EEPROM_writeByte+0x46>
        return ERROR; 
    1892:	1c 82       	std	Y+4, r1	; 0x04
    1894:	16 c0       	rjmp	.+44     	; 0x18c2 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	0e 94 13 12 	call	0x2426	; 0x2426 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    189c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <TWI_getStatus>
    18a0:	88 32       	cpi	r24, 0x28	; 40
    18a2:	11 f0       	breq	.+4      	; 0x18a8 <EEPROM_writeByte+0x58>
        return ERROR;
    18a4:	1c 82       	std	Y+4, r1	; 0x04
    18a6:	0d c0       	rjmp	.+26     	; 0x18c2 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	0e 94 13 12 	call	0x2426	; 0x2426 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18ae:	0e 94 50 12 	call	0x24a0	; 0x24a0 <TWI_getStatus>
    18b2:	88 32       	cpi	r24, 0x28	; 40
    18b4:	11 f0       	breq	.+4      	; 0x18ba <EEPROM_writeByte+0x6a>
        return ERROR;
    18b6:	1c 82       	std	Y+4, r1	; 0x04
    18b8:	04 c0       	rjmp	.+8      	; 0x18c2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    18ba:	0e 94 08 12 	call	0x2410	; 0x2410 <TWI_stop>
	
    return SUCCESS;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	8c 83       	std	Y+4, r24	; 0x04
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <EEPROM_readByte+0x6>
    18d8:	00 d0       	rcall	.+0      	; 0x18da <EEPROM_readByte+0x8>
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	9a 83       	std	Y+2, r25	; 0x02
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	7c 83       	std	Y+4, r23	; 0x04
    18e6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    18e8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    18ec:	0e 94 50 12 	call	0x24a0	; 0x24a0 <TWI_getStatus>
    18f0:	88 30       	cpi	r24, 0x08	; 8
    18f2:	11 f0       	breq	.+4      	; 0x18f8 <EEPROM_readByte+0x26>
        return ERROR;
    18f4:	1d 82       	std	Y+5, r1	; 0x05
    18f6:	44 c0       	rjmp	.+136    	; 0x1980 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	80 70       	andi	r24, 0x00	; 0
    18fe:	97 70       	andi	r25, 0x07	; 7
    1900:	88 0f       	add	r24, r24
    1902:	89 2f       	mov	r24, r25
    1904:	88 1f       	adc	r24, r24
    1906:	99 0b       	sbc	r25, r25
    1908:	91 95       	neg	r25
    190a:	80 6a       	ori	r24, 0xA0	; 160
    190c:	0e 94 13 12 	call	0x2426	; 0x2426 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1910:	0e 94 50 12 	call	0x24a0	; 0x24a0 <TWI_getStatus>
    1914:	88 31       	cpi	r24, 0x18	; 24
    1916:	11 f0       	breq	.+4      	; 0x191c <EEPROM_readByte+0x4a>
        return ERROR;
    1918:	1d 82       	std	Y+5, r1	; 0x05
    191a:	32 c0       	rjmp	.+100    	; 0x1980 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	0e 94 13 12 	call	0x2426	; 0x2426 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1922:	0e 94 50 12 	call	0x24a0	; 0x24a0 <TWI_getStatus>
    1926:	88 32       	cpi	r24, 0x28	; 40
    1928:	11 f0       	breq	.+4      	; 0x192e <EEPROM_readByte+0x5c>
        return ERROR;
    192a:	1d 82       	std	Y+5, r1	; 0x05
    192c:	29 c0       	rjmp	.+82     	; 0x1980 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    192e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1932:	0e 94 50 12 	call	0x24a0	; 0x24a0 <TWI_getStatus>
    1936:	80 31       	cpi	r24, 0x10	; 16
    1938:	11 f0       	breq	.+4      	; 0x193e <EEPROM_readByte+0x6c>
        return ERROR;
    193a:	1d 82       	std	Y+5, r1	; 0x05
    193c:	21 c0       	rjmp	.+66     	; 0x1980 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	80 70       	andi	r24, 0x00	; 0
    1944:	97 70       	andi	r25, 0x07	; 7
    1946:	88 0f       	add	r24, r24
    1948:	89 2f       	mov	r24, r25
    194a:	88 1f       	adc	r24, r24
    194c:	99 0b       	sbc	r25, r25
    194e:	91 95       	neg	r25
    1950:	81 6a       	ori	r24, 0xA1	; 161
    1952:	0e 94 13 12 	call	0x2426	; 0x2426 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1956:	0e 94 50 12 	call	0x24a0	; 0x24a0 <TWI_getStatus>
    195a:	80 34       	cpi	r24, 0x40	; 64
    195c:	11 f0       	breq	.+4      	; 0x1962 <EEPROM_readByte+0x90>
        return ERROR;
    195e:	1d 82       	std	Y+5, r1	; 0x05
    1960:	0f c0       	rjmp	.+30     	; 0x1980 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1962:	0e 94 3d 12 	call	0x247a	; 0x247a <TWI_readByteWithNACK>
    1966:	eb 81       	ldd	r30, Y+3	; 0x03
    1968:	fc 81       	ldd	r31, Y+4	; 0x04
    196a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    196c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <TWI_getStatus>
    1970:	88 35       	cpi	r24, 0x58	; 88
    1972:	11 f0       	breq	.+4      	; 0x1978 <EEPROM_readByte+0xa6>
        return ERROR;
    1974:	1d 82       	std	Y+5, r1	; 0x05
    1976:	04 c0       	rjmp	.+8      	; 0x1980 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1978:	0e 94 08 12 	call	0x2410	; 0x2410 <TWI_stop>

    return SUCCESS;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	8d 83       	std	Y+5, r24	; 0x05
    1980:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <GPIO_setupPinDirection+0x6>
    1998:	00 d0       	rcall	.+0      	; 0x199a <GPIO_setupPinDirection+0x8>
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	6a 83       	std	Y+2, r22	; 0x02
    19a4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	88 30       	cpi	r24, 0x08	; 8
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <GPIO_setupPinDirection+0x1c>
    19ac:	d5 c0       	rjmp	.+426    	; 0x1b58 <GPIO_setupPinDirection+0x1c6>
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	84 30       	cpi	r24, 0x04	; 4
    19b2:	08 f0       	brcs	.+2      	; 0x19b6 <GPIO_setupPinDirection+0x24>
    19b4:	d1 c0       	rjmp	.+418    	; 0x1b58 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	3d 83       	std	Y+5, r19	; 0x05
    19be:	2c 83       	std	Y+4, r18	; 0x04
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	9d 81       	ldd	r25, Y+5	; 0x05
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	91 05       	cpc	r25, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <GPIO_setupPinDirection+0x3a>
    19ca:	43 c0       	rjmp	.+134    	; 0x1a52 <GPIO_setupPinDirection+0xc0>
    19cc:	2c 81       	ldd	r18, Y+4	; 0x04
    19ce:	3d 81       	ldd	r19, Y+5	; 0x05
    19d0:	22 30       	cpi	r18, 0x02	; 2
    19d2:	31 05       	cpc	r19, r1
    19d4:	2c f4       	brge	.+10     	; 0x19e0 <GPIO_setupPinDirection+0x4e>
    19d6:	8c 81       	ldd	r24, Y+4	; 0x04
    19d8:	9d 81       	ldd	r25, Y+5	; 0x05
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	71 f0       	breq	.+28     	; 0x19fa <GPIO_setupPinDirection+0x68>
    19de:	bc c0       	rjmp	.+376    	; 0x1b58 <GPIO_setupPinDirection+0x1c6>
    19e0:	2c 81       	ldd	r18, Y+4	; 0x04
    19e2:	3d 81       	ldd	r19, Y+5	; 0x05
    19e4:	22 30       	cpi	r18, 0x02	; 2
    19e6:	31 05       	cpc	r19, r1
    19e8:	09 f4       	brne	.+2      	; 0x19ec <GPIO_setupPinDirection+0x5a>
    19ea:	5f c0       	rjmp	.+190    	; 0x1aaa <GPIO_setupPinDirection+0x118>
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	9d 81       	ldd	r25, Y+5	; 0x05
    19f0:	83 30       	cpi	r24, 0x03	; 3
    19f2:	91 05       	cpc	r25, r1
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <GPIO_setupPinDirection+0x66>
    19f6:	85 c0       	rjmp	.+266    	; 0x1b02 <GPIO_setupPinDirection+0x170>
    19f8:	af c0       	rjmp	.+350    	; 0x1b58 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	a1 f4       	brne	.+40     	; 0x1a28 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1a00:	aa e3       	ldi	r26, 0x3A	; 58
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	ea e3       	ldi	r30, 0x3A	; 58
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <GPIO_setupPinDirection+0x8c>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <GPIO_setupPinDirection+0x88>
    1a22:	84 2b       	or	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	98 c0       	rjmp	.+304    	; 0x1b58 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1a28:	aa e3       	ldi	r26, 0x3A	; 58
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	ea e3       	ldi	r30, 0x3A	; 58
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <GPIO_setupPinDirection+0xb4>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <GPIO_setupPinDirection+0xb0>
    1a4a:	80 95       	com	r24
    1a4c:	84 23       	and	r24, r20
    1a4e:	8c 93       	st	X, r24
    1a50:	83 c0       	rjmp	.+262    	; 0x1b58 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	a1 f4       	brne	.+40     	; 0x1a80 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1a58:	a7 e3       	ldi	r26, 0x37	; 55
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e7 e3       	ldi	r30, 0x37	; 55
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <GPIO_setupPinDirection+0xe4>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <GPIO_setupPinDirection+0xe0>
    1a7a:	84 2b       	or	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	6c c0       	rjmp	.+216    	; 0x1b58 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a80:	a7 e3       	ldi	r26, 0x37	; 55
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e7 e3       	ldi	r30, 0x37	; 55
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <GPIO_setupPinDirection+0x10c>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <GPIO_setupPinDirection+0x108>
    1aa2:	80 95       	com	r24
    1aa4:	84 23       	and	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	57 c0       	rjmp	.+174    	; 0x1b58 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	a1 f4       	brne	.+40     	; 0x1ad8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1ab0:	a4 e3       	ldi	r26, 0x34	; 52
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e4 e3       	ldi	r30, 0x34	; 52
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <GPIO_setupPinDirection+0x13c>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <GPIO_setupPinDirection+0x138>
    1ad2:	84 2b       	or	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	40 c0       	rjmp	.+128    	; 0x1b58 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ad8:	a4 e3       	ldi	r26, 0x34	; 52
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e4 e3       	ldi	r30, 0x34	; 52
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <GPIO_setupPinDirection+0x164>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <GPIO_setupPinDirection+0x160>
    1afa:	80 95       	com	r24
    1afc:	84 23       	and	r24, r20
    1afe:	8c 93       	st	X, r24
    1b00:	2b c0       	rjmp	.+86     	; 0x1b58 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	a1 f4       	brne	.+40     	; 0x1b30 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1b08:	a1 e3       	ldi	r26, 0x31	; 49
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e1 e3       	ldi	r30, 0x31	; 49
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <GPIO_setupPinDirection+0x194>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <GPIO_setupPinDirection+0x190>
    1b2a:	84 2b       	or	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b30:	a1 e3       	ldi	r26, 0x31	; 49
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e1 e3       	ldi	r30, 0x31	; 49
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <GPIO_setupPinDirection+0x1bc>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <GPIO_setupPinDirection+0x1b8>
    1b52:	80 95       	com	r24
    1b54:	84 23       	and	r24, r20
    1b56:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <GPIO_writePin+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <GPIO_writePin+0x8>
    1b70:	0f 92       	push	r0
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	6a 83       	std	Y+2, r22	; 0x02
    1b7a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	88 30       	cpi	r24, 0x08	; 8
    1b80:	08 f0       	brcs	.+2      	; 0x1b84 <GPIO_writePin+0x1c>
    1b82:	d5 c0       	rjmp	.+426    	; 0x1d2e <GPIO_writePin+0x1c6>
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	84 30       	cpi	r24, 0x04	; 4
    1b88:	08 f0       	brcs	.+2      	; 0x1b8c <GPIO_writePin+0x24>
    1b8a:	d1 c0       	rjmp	.+418    	; 0x1d2e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	3d 83       	std	Y+5, r19	; 0x05
    1b94:	2c 83       	std	Y+4, r18	; 0x04
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
    1b98:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <GPIO_writePin+0x3a>
    1ba0:	43 c0       	rjmp	.+134    	; 0x1c28 <GPIO_writePin+0xc0>
    1ba2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <GPIO_writePin+0x4e>
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	71 f0       	breq	.+28     	; 0x1bd0 <GPIO_writePin+0x68>
    1bb4:	bc c0       	rjmp	.+376    	; 0x1d2e <GPIO_writePin+0x1c6>
    1bb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <GPIO_writePin+0x5a>
    1bc0:	5f c0       	rjmp	.+190    	; 0x1c80 <GPIO_writePin+0x118>
    1bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc6:	83 30       	cpi	r24, 0x03	; 3
    1bc8:	91 05       	cpc	r25, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <GPIO_writePin+0x66>
    1bcc:	85 c0       	rjmp	.+266    	; 0x1cd8 <GPIO_writePin+0x170>
    1bce:	af c0       	rjmp	.+350    	; 0x1d2e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	a1 f4       	brne	.+40     	; 0x1bfe <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1bd6:	ab e3       	ldi	r26, 0x3B	; 59
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	eb e3       	ldi	r30, 0x3B	; 59
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <GPIO_writePin+0x8c>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <GPIO_writePin+0x88>
    1bf8:	84 2b       	or	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	98 c0       	rjmp	.+304    	; 0x1d2e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1bfe:	ab e3       	ldi	r26, 0x3B	; 59
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	eb e3       	ldi	r30, 0x3B	; 59
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 2e       	mov	r0, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <GPIO_writePin+0xb4>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <GPIO_writePin+0xb0>
    1c20:	80 95       	com	r24
    1c22:	84 23       	and	r24, r20
    1c24:	8c 93       	st	X, r24
    1c26:	83 c0       	rjmp	.+262    	; 0x1d2e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	a1 f4       	brne	.+40     	; 0x1c56 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1c2e:	a8 e3       	ldi	r26, 0x38	; 56
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e8 e3       	ldi	r30, 0x38	; 56
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <GPIO_writePin+0xe4>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <GPIO_writePin+0xe0>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	6c c0       	rjmp	.+216    	; 0x1d2e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1c56:	a8 e3       	ldi	r26, 0x38	; 56
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e8 e3       	ldi	r30, 0x38	; 56
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <GPIO_writePin+0x10c>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <GPIO_writePin+0x108>
    1c78:	80 95       	com	r24
    1c7a:	84 23       	and	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	57 c0       	rjmp	.+174    	; 0x1d2e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	a1 f4       	brne	.+40     	; 0x1cae <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c86:	a5 e3       	ldi	r26, 0x35	; 53
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e5 e3       	ldi	r30, 0x35	; 53
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <GPIO_writePin+0x13c>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	0a 94       	dec	r0
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <GPIO_writePin+0x138>
    1ca8:	84 2b       	or	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	40 c0       	rjmp	.+128    	; 0x1d2e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1cae:	a5 e3       	ldi	r26, 0x35	; 53
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e5 e3       	ldi	r30, 0x35	; 53
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	48 2f       	mov	r20, r24
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	02 2e       	mov	r0, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <GPIO_writePin+0x164>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	0a 94       	dec	r0
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <GPIO_writePin+0x160>
    1cd0:	80 95       	com	r24
    1cd2:	84 23       	and	r24, r20
    1cd4:	8c 93       	st	X, r24
    1cd6:	2b c0       	rjmp	.+86     	; 0x1d2e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	a1 f4       	brne	.+40     	; 0x1d06 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1cde:	a2 e3       	ldi	r26, 0x32	; 50
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e2 e3       	ldi	r30, 0x32	; 50
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 2e       	mov	r0, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <GPIO_writePin+0x194>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	0a 94       	dec	r0
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <GPIO_writePin+0x190>
    1d00:	84 2b       	or	r24, r20
    1d02:	8c 93       	st	X, r24
    1d04:	14 c0       	rjmp	.+40     	; 0x1d2e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1d06:	a2 e3       	ldi	r26, 0x32	; 50
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e2 e3       	ldi	r30, 0x32	; 50
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	48 2f       	mov	r20, r24
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	02 2e       	mov	r0, r18
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <GPIO_writePin+0x1bc>
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	0a 94       	dec	r0
    1d26:	e2 f7       	brpl	.-8      	; 0x1d20 <GPIO_writePin+0x1b8>
    1d28:	80 95       	com	r24
    1d2a:	84 23       	and	r24, r20
    1d2c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <GPIO_readPin+0x6>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <GPIO_readPin+0x8>
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
    1d4e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1d50:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	88 30       	cpi	r24, 0x08	; 8
    1d56:	08 f0       	brcs	.+2      	; 0x1d5a <GPIO_readPin+0x1c>
    1d58:	84 c0       	rjmp	.+264    	; 0x1e62 <GPIO_readPin+0x124>
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	84 30       	cpi	r24, 0x04	; 4
    1d5e:	08 f0       	brcs	.+2      	; 0x1d62 <GPIO_readPin+0x24>
    1d60:	80 c0       	rjmp	.+256    	; 0x1e62 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	3d 83       	std	Y+5, r19	; 0x05
    1d6a:	2c 83       	std	Y+4, r18	; 0x04
    1d6c:	4c 81       	ldd	r20, Y+4	; 0x04
    1d6e:	5d 81       	ldd	r21, Y+5	; 0x05
    1d70:	41 30       	cpi	r20, 0x01	; 1
    1d72:	51 05       	cpc	r21, r1
    1d74:	79 f1       	breq	.+94     	; 0x1dd4 <GPIO_readPin+0x96>
    1d76:	8c 81       	ldd	r24, Y+4	; 0x04
    1d78:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7a:	82 30       	cpi	r24, 0x02	; 2
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	34 f4       	brge	.+12     	; 0x1d8c <GPIO_readPin+0x4e>
    1d80:	2c 81       	ldd	r18, Y+4	; 0x04
    1d82:	3d 81       	ldd	r19, Y+5	; 0x05
    1d84:	21 15       	cp	r18, r1
    1d86:	31 05       	cpc	r19, r1
    1d88:	69 f0       	breq	.+26     	; 0x1da4 <GPIO_readPin+0x66>
    1d8a:	6b c0       	rjmp	.+214    	; 0x1e62 <GPIO_readPin+0x124>
    1d8c:	4c 81       	ldd	r20, Y+4	; 0x04
    1d8e:	5d 81       	ldd	r21, Y+5	; 0x05
    1d90:	42 30       	cpi	r20, 0x02	; 2
    1d92:	51 05       	cpc	r21, r1
    1d94:	b9 f1       	breq	.+110    	; 0x1e04 <GPIO_readPin+0xc6>
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9a:	83 30       	cpi	r24, 0x03	; 3
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <GPIO_readPin+0x64>
    1da0:	49 c0       	rjmp	.+146    	; 0x1e34 <GPIO_readPin+0xf6>
    1da2:	5f c0       	rjmp	.+190    	; 0x1e62 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1da4:	e9 e3       	ldi	r30, 0x39	; 57
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a9 01       	movw	r20, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <GPIO_readPin+0x7e>
    1db8:	55 95       	asr	r21
    1dba:	47 95       	ror	r20
    1dbc:	8a 95       	dec	r24
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <GPIO_readPin+0x7a>
    1dc0:	ca 01       	movw	r24, r20
    1dc2:	81 70       	andi	r24, 0x01	; 1
    1dc4:	90 70       	andi	r25, 0x00	; 0
    1dc6:	88 23       	and	r24, r24
    1dc8:	19 f0       	breq	.+6      	; 0x1dd0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	49 c0       	rjmp	.+146    	; 0x1e62 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dd0:	19 82       	std	Y+1, r1	; 0x01
    1dd2:	47 c0       	rjmp	.+142    	; 0x1e62 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1dd4:	e6 e3       	ldi	r30, 0x36	; 54
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a9 01       	movw	r20, r18
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <GPIO_readPin+0xae>
    1de8:	55 95       	asr	r21
    1dea:	47 95       	ror	r20
    1dec:	8a 95       	dec	r24
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <GPIO_readPin+0xaa>
    1df0:	ca 01       	movw	r24, r20
    1df2:	81 70       	andi	r24, 0x01	; 1
    1df4:	90 70       	andi	r25, 0x00	; 0
    1df6:	88 23       	and	r24, r24
    1df8:	19 f0       	breq	.+6      	; 0x1e00 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	31 c0       	rjmp	.+98     	; 0x1e62 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e00:	19 82       	std	Y+1, r1	; 0x01
    1e02:	2f c0       	rjmp	.+94     	; 0x1e62 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1e04:	e3 e3       	ldi	r30, 0x33	; 51
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	88 2f       	mov	r24, r24
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	a9 01       	movw	r20, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <GPIO_readPin+0xde>
    1e18:	55 95       	asr	r21
    1e1a:	47 95       	ror	r20
    1e1c:	8a 95       	dec	r24
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <GPIO_readPin+0xda>
    1e20:	ca 01       	movw	r24, r20
    1e22:	81 70       	andi	r24, 0x01	; 1
    1e24:	90 70       	andi	r25, 0x00	; 0
    1e26:	88 23       	and	r24, r24
    1e28:	19 f0       	breq	.+6      	; 0x1e30 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	19 c0       	rjmp	.+50     	; 0x1e62 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e30:	19 82       	std	Y+1, r1	; 0x01
    1e32:	17 c0       	rjmp	.+46     	; 0x1e62 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1e34:	e0 e3       	ldi	r30, 0x30	; 48
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a9 01       	movw	r20, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <GPIO_readPin+0x10e>
    1e48:	55 95       	asr	r21
    1e4a:	47 95       	ror	r20
    1e4c:	8a 95       	dec	r24
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <GPIO_readPin+0x10a>
    1e50:	ca 01       	movw	r24, r20
    1e52:	81 70       	andi	r24, 0x01	; 1
    1e54:	90 70       	andi	r25, 0x00	; 0
    1e56:	88 23       	and	r24, r24
    1e58:	19 f0       	breq	.+6      	; 0x1e60 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	01 c0       	rjmp	.+2      	; 0x1e62 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e60:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <GPIO_setupPortDirection+0x6>
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <GPIO_setupPortDirection+0x8>
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	84 30       	cpi	r24, 0x04	; 4
    1e88:	90 f5       	brcc	.+100    	; 0x1eee <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	3c 83       	std	Y+4, r19	; 0x04
    1e92:	2b 83       	std	Y+3, r18	; 0x03
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	9c 81       	ldd	r25, Y+4	; 0x04
    1e98:	81 30       	cpi	r24, 0x01	; 1
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	d1 f0       	breq	.+52     	; 0x1ed2 <GPIO_setupPortDirection+0x5e>
    1e9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea2:	22 30       	cpi	r18, 0x02	; 2
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	2c f4       	brge	.+10     	; 0x1eb2 <GPIO_setupPortDirection+0x3e>
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	61 f0       	breq	.+24     	; 0x1ec8 <GPIO_setupPortDirection+0x54>
    1eb0:	1e c0       	rjmp	.+60     	; 0x1eee <GPIO_setupPortDirection+0x7a>
    1eb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb6:	22 30       	cpi	r18, 0x02	; 2
    1eb8:	31 05       	cpc	r19, r1
    1eba:	81 f0       	breq	.+32     	; 0x1edc <GPIO_setupPortDirection+0x68>
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	83 30       	cpi	r24, 0x03	; 3
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	81 f0       	breq	.+32     	; 0x1ee6 <GPIO_setupPortDirection+0x72>
    1ec6:	13 c0       	rjmp	.+38     	; 0x1eee <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ec8:	ea e3       	ldi	r30, 0x3A	; 58
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	80 83       	st	Z, r24
    1ed0:	0e c0       	rjmp	.+28     	; 0x1eee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ed2:	e7 e3       	ldi	r30, 0x37	; 55
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	80 83       	st	Z, r24
    1eda:	09 c0       	rjmp	.+18     	; 0x1eee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1edc:	e4 e3       	ldi	r30, 0x34	; 52
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	80 83       	st	Z, r24
    1ee4:	04 c0       	rjmp	.+8      	; 0x1eee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ee6:	e1 e3       	ldi	r30, 0x31	; 49
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	80 83       	st	Z, r24
			break;
		}
	}
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <GPIO_writePort+0x6>
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <GPIO_writePort+0x8>
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	84 30       	cpi	r24, 0x04	; 4
    1f10:	90 f5       	brcc	.+100    	; 0x1f76 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	3c 83       	std	Y+4, r19	; 0x04
    1f1a:	2b 83       	std	Y+3, r18	; 0x03
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	91 05       	cpc	r25, r1
    1f24:	d1 f0       	breq	.+52     	; 0x1f5a <GPIO_writePort+0x5e>
    1f26:	2b 81       	ldd	r18, Y+3	; 0x03
    1f28:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2a:	22 30       	cpi	r18, 0x02	; 2
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <GPIO_writePort+0x3e>
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	61 f0       	breq	.+24     	; 0x1f50 <GPIO_writePort+0x54>
    1f38:	1e c0       	rjmp	.+60     	; 0x1f76 <GPIO_writePort+0x7a>
    1f3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3e:	22 30       	cpi	r18, 0x02	; 2
    1f40:	31 05       	cpc	r19, r1
    1f42:	81 f0       	breq	.+32     	; 0x1f64 <GPIO_writePort+0x68>
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	83 30       	cpi	r24, 0x03	; 3
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	81 f0       	breq	.+32     	; 0x1f6e <GPIO_writePort+0x72>
    1f4e:	13 c0       	rjmp	.+38     	; 0x1f76 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1f50:	eb e3       	ldi	r30, 0x3B	; 59
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	80 83       	st	Z, r24
    1f58:	0e c0       	rjmp	.+28     	; 0x1f76 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f5a:	e8 e3       	ldi	r30, 0x38	; 56
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	80 83       	st	Z, r24
    1f62:	09 c0       	rjmp	.+18     	; 0x1f76 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f64:	e5 e3       	ldi	r30, 0x35	; 53
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	80 83       	st	Z, r24
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f6e:	e2 e3       	ldi	r30, 0x32	; 50
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <GPIO_readPort+0x6>
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <GPIO_readPort+0x8>
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f92:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	84 30       	cpi	r24, 0x04	; 4
    1f98:	90 f5       	brcc	.+100    	; 0x1ffe <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	3c 83       	std	Y+4, r19	; 0x04
    1fa2:	2b 83       	std	Y+3, r18	; 0x03
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	81 30       	cpi	r24, 0x01	; 1
    1faa:	91 05       	cpc	r25, r1
    1fac:	d1 f0       	breq	.+52     	; 0x1fe2 <GPIO_readPort+0x5e>
    1fae:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb2:	22 30       	cpi	r18, 0x02	; 2
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <GPIO_readPort+0x3e>
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	61 f0       	breq	.+24     	; 0x1fd8 <GPIO_readPort+0x54>
    1fc0:	1e c0       	rjmp	.+60     	; 0x1ffe <GPIO_readPort+0x7a>
    1fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc6:	22 30       	cpi	r18, 0x02	; 2
    1fc8:	31 05       	cpc	r19, r1
    1fca:	81 f0       	breq	.+32     	; 0x1fec <GPIO_readPort+0x68>
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	83 30       	cpi	r24, 0x03	; 3
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	81 f0       	breq	.+32     	; 0x1ff6 <GPIO_readPort+0x72>
    1fd6:	13 c0       	rjmp	.+38     	; 0x1ffe <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1fd8:	e9 e3       	ldi	r30, 0x39	; 57
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	0e c0       	rjmp	.+28     	; 0x1ffe <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1fe2:	e6 e3       	ldi	r30, 0x36	; 54
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	09 c0       	rjmp	.+18     	; 0x1ffe <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1fec:	e3 e3       	ldi	r30, 0x33	; 51
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	04 c0       	rjmp	.+8      	; 0x1ffe <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ff6:	e0 e3       	ldi	r30, 0x30	; 48
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <Timer0_PWM_Init>:
#include "PWM.h"
#include "avr/io.h"


void Timer0_PWM_Init(uint8 duty_cycle)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	0f 92       	push	r0
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    201a:	e2 e5       	ldi	r30, 0x52	; 82
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	10 82       	st	Z, r1

	OCR0  = duty_cycle; //Set Compare value
    2020:	ec e5       	ldi	r30, 0x5C	; 92
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    2028:	a7 e3       	ldi	r26, 0x37	; 55
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e7 e3       	ldi	r30, 0x37	; 55
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	88 60       	ori	r24, 0x08	; 8
    2034:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2036:	e3 e5       	ldi	r30, 0x53	; 83
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	8a e6       	ldi	r24, 0x6A	; 106
    203c:	80 83       	st	Z, r24
}
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <__vector_9>:


static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR (TIMER1_OVF_vect)
{
    2046:	1f 92       	push	r1
    2048:	0f 92       	push	r0
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	0f 92       	push	r0
    204e:	11 24       	eor	r1, r1
    2050:	2f 93       	push	r18
    2052:	3f 93       	push	r19
    2054:	4f 93       	push	r20
    2056:	5f 93       	push	r21
    2058:	6f 93       	push	r22
    205a:	7f 93       	push	r23
    205c:	8f 93       	push	r24
    205e:	9f 93       	push	r25
    2060:	af 93       	push	r26
    2062:	bf 93       	push	r27
    2064:	ef 93       	push	r30
    2066:	ff 93       	push	r31
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    2070:	80 91 7c 00 	lds	r24, 0x007C
    2074:	90 91 7d 00 	lds	r25, 0x007D
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	29 f0       	breq	.+10     	; 0x2086 <__vector_9+0x40>
		g_callBackPtr();
    207c:	e0 91 7c 00 	lds	r30, 0x007C
    2080:	f0 91 7d 00 	lds	r31, 0x007D
    2084:	09 95       	icall
}
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	ff 91       	pop	r31
    208c:	ef 91       	pop	r30
    208e:	bf 91       	pop	r27
    2090:	af 91       	pop	r26
    2092:	9f 91       	pop	r25
    2094:	8f 91       	pop	r24
    2096:	7f 91       	pop	r23
    2098:	6f 91       	pop	r22
    209a:	5f 91       	pop	r21
    209c:	4f 91       	pop	r20
    209e:	3f 91       	pop	r19
    20a0:	2f 91       	pop	r18
    20a2:	0f 90       	pop	r0
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	0f 90       	pop	r0
    20a8:	1f 90       	pop	r1
    20aa:	18 95       	reti

000020ac <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    20ac:	1f 92       	push	r1
    20ae:	0f 92       	push	r0
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	0f 92       	push	r0
    20b4:	11 24       	eor	r1, r1
    20b6:	2f 93       	push	r18
    20b8:	3f 93       	push	r19
    20ba:	4f 93       	push	r20
    20bc:	5f 93       	push	r21
    20be:	6f 93       	push	r22
    20c0:	7f 93       	push	r23
    20c2:	8f 93       	push	r24
    20c4:	9f 93       	push	r25
    20c6:	af 93       	push	r26
    20c8:	bf 93       	push	r27
    20ca:	ef 93       	push	r30
    20cc:	ff 93       	push	r31
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    20d6:	80 91 7c 00 	lds	r24, 0x007C
    20da:	90 91 7d 00 	lds	r25, 0x007D
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	29 f0       	breq	.+10     	; 0x20ec <__vector_7+0x40>
		g_callBackPtr();
    20e2:	e0 91 7c 00 	lds	r30, 0x007C
    20e6:	f0 91 7d 00 	lds	r31, 0x007D
    20ea:	09 95       	icall
}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	ff 91       	pop	r31
    20f2:	ef 91       	pop	r30
    20f4:	bf 91       	pop	r27
    20f6:	af 91       	pop	r26
    20f8:	9f 91       	pop	r25
    20fa:	8f 91       	pop	r24
    20fc:	7f 91       	pop	r23
    20fe:	6f 91       	pop	r22
    2100:	5f 91       	pop	r21
    2102:	4f 91       	pop	r20
    2104:	3f 91       	pop	r19
    2106:	2f 91       	pop	r18
    2108:	0f 90       	pop	r0
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	0f 90       	pop	r0
    210e:	1f 90       	pop	r1
    2110:	18 95       	reti

00002112 <Timer1_init>:



void Timer1_init (const Timer1_ConfigType * Config_Ptr)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <Timer1_init+0x6>
    2118:	00 d0       	rcall	.+0      	; 0x211a <Timer1_init+0x8>
    211a:	00 d0       	rcall	.+0      	; 0x211c <Timer1_init+0xa>
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr -> initial_value;  /*** SET Timer initial value ***/
    2124:	ac e4       	ldi	r26, 0x4C	; 76
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e9 81       	ldd	r30, Y+1	; 0x01
    212a:	fa 81       	ldd	r31, Y+2	; 0x02
    212c:	80 81       	ld	r24, Z
    212e:	91 81       	ldd	r25, Z+1	; 0x01
    2130:	11 96       	adiw	r26, 0x01	; 1
    2132:	9c 93       	st	X, r25
    2134:	8e 93       	st	-X, r24
	switch (Config_Ptr -> mode)
    2136:	e9 81       	ldd	r30, Y+1	; 0x01
    2138:	fa 81       	ldd	r31, Y+2	; 0x02
    213a:	85 81       	ldd	r24, Z+5	; 0x05
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	3e 83       	std	Y+6, r19	; 0x06
    2142:	2d 83       	std	Y+5, r18	; 0x05
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	31 f0       	breq	.+12     	; 0x2158 <Timer1_init+0x46>
    214c:	2d 81       	ldd	r18, Y+5	; 0x05
    214e:	3e 81       	ldd	r19, Y+6	; 0x06
    2150:	21 30       	cpi	r18, 0x01	; 1
    2152:	31 05       	cpc	r19, r1
    2154:	49 f0       	breq	.+18     	; 0x2168 <Timer1_init+0x56>
    2156:	1f c0       	rjmp	.+62     	; 0x2196 <Timer1_init+0x84>
	{
		case(OVER_FLOW):

			SET_BIT(TIMSK, TOIE1);        /*** Enable overflow interrupt ***/
    2158:	a9 e5       	ldi	r26, 0x59	; 89
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e9 e5       	ldi	r30, 0x59	; 89
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	84 60       	ori	r24, 0x04	; 4
    2164:	8c 93       	st	X, r24
    2166:	17 c0       	rjmp	.+46     	; 0x2196 <Timer1_init+0x84>
			break;
		case(COMPARE):
			SET_BIT(TIMSK, OCIE1A);       /*** Enable compare interrupt ***/
    2168:	a9 e5       	ldi	r26, 0x59	; 89
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e9 e5       	ldi	r30, 0x59	; 89
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	80 61       	ori	r24, 0x10	; 16
    2174:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);		  /*** SET WaveForm generation mode to CTC (clear timer on compare match) ***/
    2176:	ae e4       	ldi	r26, 0x4E	; 78
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	ee e4       	ldi	r30, 0x4E	; 78
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	88 60       	ori	r24, 0x08	; 8
    2182:	8c 93       	st	X, r24
			OCR1A = Config_Ptr -> compare_value;   /*** SET Timer compare value ***/
    2184:	aa e4       	ldi	r26, 0x4A	; 74
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e9 81       	ldd	r30, Y+1	; 0x01
    218a:	fa 81       	ldd	r31, Y+2	; 0x02
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	11 96       	adiw	r26, 0x01	; 1
    2192:	9c 93       	st	X, r25
    2194:	8e 93       	st	-X, r24
			break;

	}
	switch (Config_Ptr -> prescaler)		/*** PRESCALER-SELECT (FCPU, FCPU/8, FCPU/64, FCPU/256, FCPU/1024) ***/
    2196:	e9 81       	ldd	r30, Y+1	; 0x01
    2198:	fa 81       	ldd	r31, Y+2	; 0x02
    219a:	84 81       	ldd	r24, Z+4	; 0x04
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	3c 83       	std	Y+4, r19	; 0x04
    21a2:	2b 83       	std	Y+3, r18	; 0x03
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	82 30       	cpi	r24, 0x02	; 2
    21aa:	91 05       	cpc	r25, r1
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <Timer1_init+0x9e>
    21ae:	48 c0       	rjmp	.+144    	; 0x2240 <Timer1_init+0x12e>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	23 30       	cpi	r18, 0x03	; 3
    21b6:	31 05       	cpc	r19, r1
    21b8:	54 f4       	brge	.+20     	; 0x21ce <Timer1_init+0xbc>
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	99 f0       	breq	.+38     	; 0x21e8 <Timer1_init+0xd6>
    21c2:	2b 81       	ldd	r18, Y+3	; 0x03
    21c4:	3c 81       	ldd	r19, Y+4	; 0x04
    21c6:	21 30       	cpi	r18, 0x01	; 1
    21c8:	31 05       	cpc	r19, r1
    21ca:	21 f1       	breq	.+72     	; 0x2214 <Timer1_init+0x102>
    21cc:	7a c0       	rjmp	.+244    	; 0x22c2 <Timer1_init+0x1b0>
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	83 30       	cpi	r24, 0x03	; 3
    21d4:	91 05       	cpc	r25, r1
    21d6:	09 f4       	brne	.+2      	; 0x21da <Timer1_init+0xc8>
    21d8:	49 c0       	rjmp	.+146    	; 0x226c <Timer1_init+0x15a>
    21da:	2b 81       	ldd	r18, Y+3	; 0x03
    21dc:	3c 81       	ldd	r19, Y+4	; 0x04
    21de:	24 30       	cpi	r18, 0x04	; 4
    21e0:	31 05       	cpc	r19, r1
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <Timer1_init+0xd4>
    21e4:	59 c0       	rjmp	.+178    	; 0x2298 <Timer1_init+0x186>
    21e6:	6d c0       	rjmp	.+218    	; 0x22c2 <Timer1_init+0x1b0>
	{
		case(F_CPU_1):
			SET_BIT(TCCR1B, CS10);
    21e8:	ae e4       	ldi	r26, 0x4E	; 78
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	ee e4       	ldi	r30, 0x4E	; 78
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	81 60       	ori	r24, 0x01	; 1
    21f4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, CS11);
    21f6:	ae e4       	ldi	r26, 0x4E	; 78
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	ee e4       	ldi	r30, 0x4E	; 78
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	8d 7f       	andi	r24, 0xFD	; 253
    2202:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, CS12);
    2204:	ae e4       	ldi	r26, 0x4E	; 78
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	ee e4       	ldi	r30, 0x4E	; 78
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	8b 7f       	andi	r24, 0xFB	; 251
    2210:	8c 93       	st	X, r24
    2212:	57 c0       	rjmp	.+174    	; 0x22c2 <Timer1_init+0x1b0>
			break;
		case (F_CPU_8):
			SET_BIT(TCCR1B, CS10);
    2214:	ae e4       	ldi	r26, 0x4E	; 78
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	ee e4       	ldi	r30, 0x4E	; 78
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	81 60       	ori	r24, 0x01	; 1
    2220:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, CS11);
    2222:	ae e4       	ldi	r26, 0x4E	; 78
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	ee e4       	ldi	r30, 0x4E	; 78
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	8d 7f       	andi	r24, 0xFD	; 253
    222e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, CS12);
    2230:	ae e4       	ldi	r26, 0x4E	; 78
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	ee e4       	ldi	r30, 0x4E	; 78
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	8b 7f       	andi	r24, 0xFB	; 251
    223c:	8c 93       	st	X, r24
    223e:	41 c0       	rjmp	.+130    	; 0x22c2 <Timer1_init+0x1b0>
			break;
		case (F_CPU_64):
			SET_BIT(TCCR1B, CS10);
    2240:	ae e4       	ldi	r26, 0x4E	; 78
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	ee e4       	ldi	r30, 0x4E	; 78
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	81 60       	ori	r24, 0x01	; 1
    224c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, CS11);
    224e:	ae e4       	ldi	r26, 0x4E	; 78
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ee e4       	ldi	r30, 0x4E	; 78
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	82 60       	ori	r24, 0x02	; 2
    225a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, CS12);
    225c:	ae e4       	ldi	r26, 0x4E	; 78
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	ee e4       	ldi	r30, 0x4E	; 78
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8b 7f       	andi	r24, 0xFB	; 251
    2268:	8c 93       	st	X, r24
    226a:	2b c0       	rjmp	.+86     	; 0x22c2 <Timer1_init+0x1b0>
			break;
		case (F_CPU_256):
			SET_BIT(TCCR1B, CS10);
    226c:	ae e4       	ldi	r26, 0x4E	; 78
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ee e4       	ldi	r30, 0x4E	; 78
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	81 60       	ori	r24, 0x01	; 1
    2278:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, CS11);
    227a:	ae e4       	ldi	r26, 0x4E	; 78
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	ee e4       	ldi	r30, 0x4E	; 78
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	8d 7f       	andi	r24, 0xFD	; 253
    2286:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, CS12);
    2288:	ae e4       	ldi	r26, 0x4E	; 78
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ee e4       	ldi	r30, 0x4E	; 78
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8b 7f       	andi	r24, 0xFB	; 251
    2294:	8c 93       	st	X, r24
    2296:	15 c0       	rjmp	.+42     	; 0x22c2 <Timer1_init+0x1b0>
			break;
		case (F_CPU_1024):
			SET_BIT(TCCR1B, CS10);
    2298:	ae e4       	ldi	r26, 0x4E	; 78
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	ee e4       	ldi	r30, 0x4E	; 78
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	81 60       	ori	r24, 0x01	; 1
    22a4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1B, CS11);
    22a6:	ae e4       	ldi	r26, 0x4E	; 78
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	ee e4       	ldi	r30, 0x4E	; 78
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	8d 7f       	andi	r24, 0xFD	; 253
    22b2:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, CS12);
    22b4:	ae e4       	ldi	r26, 0x4E	; 78
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	ee e4       	ldi	r30, 0x4E	; 78
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	84 60       	ori	r24, 0x04	; 4
    22c0:	8c 93       	st	X, r24
			break;



	}
}
    22c2:	26 96       	adiw	r28, 0x06	; 6
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <Timer1_deInit>:

void Timer1_deInit(void)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
	TIMSK = 0;			/*** Clear Timer interrupts ***/
    22dc:	e9 e5       	ldi	r30, 0x59	; 89
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	10 82       	st	Z, r1
	OCR1A = 0;			/*** clear compare register ***/
    22e2:	ea e4       	ldi	r30, 0x4A	; 74
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	11 82       	std	Z+1, r1	; 0x01
    22e8:	10 82       	st	Z, r1
	TCNT1 = 0;			/*** Clear Timer initial value ***/
    22ea:	ec e4       	ldi	r30, 0x4C	; 76
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	11 82       	std	Z+1, r1	; 0x01
    22f0:	10 82       	st	Z, r1
	CLEAR_BIT(TCCR1B, WGM12);	/*** Clear waveform generation mode ***/
    22f2:	ae e4       	ldi	r26, 0x4E	; 78
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	ee e4       	ldi	r30, 0x4E	; 78
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	87 7f       	andi	r24, 0xF7	; 247
    22fe:	8c 93       	st	X, r24
}
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	00 d0       	rcall	.+0      	; 0x230c <Timer1_setCallBack+0x6>
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr; 			/*** Setup call-back pointer ***/
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	9a 81       	ldd	r25, Y+2	; 0x02
    2318:	90 93 7d 00 	sts	0x007D, r25
    231c:	80 93 7c 00 	sts	0x007C, r24
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <TWI_setupBitRate>:
#include "common_macros.h"
#include <avr/io.h>


void TWI_setupBitRate(TWI_BaudRate bit_rate)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	28 97       	sbiw	r28, 0x08	; 8
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	69 83       	std	Y+1, r22	; 0x01
    2340:	7a 83       	std	Y+2, r23	; 0x02
    2342:	8b 83       	std	Y+3, r24	; 0x03
    2344:	9c 83       	std	Y+4, r25	; 0x04
	switch(bit_rate){
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	ab 81       	ldd	r26, Y+3	; 0x03
    234c:	bc 81       	ldd	r27, Y+4	; 0x04
    234e:	8d 83       	std	Y+5, r24	; 0x05
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	af 83       	std	Y+7, r26	; 0x07
    2354:	b8 87       	std	Y+8, r27	; 0x08
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	af 81       	ldd	r26, Y+7	; 0x07
    235c:	b8 85       	ldd	r27, Y+8	; 0x08
    235e:	84 36       	cpi	r24, 0x64	; 100
    2360:	91 05       	cpc	r25, r1
    2362:	a1 05       	cpc	r26, r1
    2364:	b1 05       	cpc	r27, r1
    2366:	a1 f0       	breq	.+40     	; 0x2390 <TWI_setupBitRate+0x66>
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	af 81       	ldd	r26, Y+7	; 0x07
    236e:	b8 85       	ldd	r27, Y+8	; 0x08
    2370:	80 39       	cpi	r24, 0x90	; 144
    2372:	21 e0       	ldi	r18, 0x01	; 1
    2374:	92 07       	cpc	r25, r18
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	a2 07       	cpc	r26, r18
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	b2 07       	cpc	r27, r18
    237e:	79 f4       	brne	.+30     	; 0x239e <TWI_setupBitRate+0x74>
	case 400:
	    TWBR = 0x02;
    2380:	e0 e2       	ldi	r30, 0x20	; 32
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	82 e0       	ldi	r24, 0x02	; 2
    2386:	80 83       	st	Z, r24
		TWSR = 0x00;
    2388:	e1 e2       	ldi	r30, 0x21	; 33
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	10 82       	st	Z, r1
    238e:	07 c0       	rjmp	.+14     	; 0x239e <TWI_setupBitRate+0x74>
		break;
	case 100:
	    TWBR = 0x02;
    2390:	e0 e2       	ldi	r30, 0x20	; 32
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	80 83       	st	Z, r24
		TWSR = 0x00;
    2398:	e1 e2       	ldi	r30, 0x21	; 33
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	10 82       	st	Z, r1
		break;
	}
}
    239e:	28 96       	adiw	r28, 0x08	; 8
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <TWI_init>:

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <TWI_init+0x6>
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
    /* Setup bitrate */
	TWI_setupBitRate(Config_Ptr -> bit_rate);
    23be:	e9 81       	ldd	r30, Y+1	; 0x01
    23c0:	fa 81       	ldd	r31, Y+2	; 0x02
    23c2:	81 81       	ldd	r24, Z+1	; 0x01
    23c4:	92 81       	ldd	r25, Z+2	; 0x02
    23c6:	a3 81       	ldd	r26, Z+3	; 0x03
    23c8:	b4 81       	ldd	r27, Z+4	; 0x04
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 95 11 	call	0x232a	; 0x232a <TWI_setupBitRate>

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr -> address; // my address
    23d2:	a2 e2       	ldi	r26, 0x22	; 34
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e9 81       	ldd	r30, Y+1	; 0x01
    23d8:	fa 81       	ldd	r31, Y+2	; 0x02
    23da:	80 81       	ld	r24, Z
    23dc:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    23de:	e6 e5       	ldi	r30, 0x56	; 86
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	84 e0       	ldi	r24, 0x04	; 4
    23e4:	80 83       	st	Z, r24
}
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <TWI_start>:

void TWI_start(void)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    23f8:	e6 e5       	ldi	r30, 0x56	; 86
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	84 ea       	ldi	r24, 0xA4	; 164
    23fe:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2400:	e6 e5       	ldi	r30, 0x56	; 86
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	88 23       	and	r24, r24
    2408:	dc f7       	brge	.-10     	; 0x2400 <TWI_start+0x10>
}
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <TWI_stop>:

void TWI_stop(void)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2418:	e6 e5       	ldi	r30, 0x56	; 86
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	84 e9       	ldi	r24, 0x94	; 148
    241e:	80 83       	st	Z, r24
}
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	0f 92       	push	r0
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2432:	e3 e2       	ldi	r30, 0x23	; 35
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    243a:	e6 e5       	ldi	r30, 0x56	; 86
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	84 e8       	ldi	r24, 0x84	; 132
    2440:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2442:	e6 e5       	ldi	r30, 0x56	; 86
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	88 23       	and	r24, r24
    244a:	dc f7       	brge	.-10     	; 0x2442 <TWI_writeByte+0x1c>
}
    244c:	0f 90       	pop	r0
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    245c:	e6 e5       	ldi	r30, 0x56	; 86
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	84 ec       	ldi	r24, 0xC4	; 196
    2462:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2464:	e6 e5       	ldi	r30, 0x56	; 86
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	88 23       	and	r24, r24
    246c:	dc f7       	brge	.-10     	; 0x2464 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    246e:	e3 e2       	ldi	r30, 0x23	; 35
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
}
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2482:	e6 e5       	ldi	r30, 0x56	; 86
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	84 e8       	ldi	r24, 0x84	; 132
    2488:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    248a:	e6 e5       	ldi	r30, 0x56	; 86
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	88 23       	and	r24, r24
    2492:	dc f7       	brge	.-10     	; 0x248a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2494:	e3 e2       	ldi	r30, 0x23	; 35
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
}
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	0f 92       	push	r0
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    24aa:	e1 e2       	ldi	r30, 0x21	; 33
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	88 7f       	andi	r24, 0xF8	; 248
    24b2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	2a 97       	sbiw	r28, 0x0a	; 10
    24c8:	0f b6       	in	r0, 0x3f	; 63
    24ca:	f8 94       	cli
    24cc:	de bf       	out	0x3e, r29	; 62
    24ce:	0f be       	out	0x3f, r0	; 63
    24d0:	cd bf       	out	0x3d, r28	; 61
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    24d6:	1a 82       	std	Y+2, r1	; 0x02
    24d8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    24da:	eb e2       	ldi	r30, 0x2B	; 43
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	82 e0       	ldi	r24, 0x02	; 2
    24e0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    24e2:	ea e2       	ldi	r30, 0x2A	; 42
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	88 e1       	ldi	r24, 0x18	; 24
    24e8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRC, URSEL);
    24ea:	a0 e4       	ldi	r26, 0x40	; 64
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e0 e4       	ldi	r30, 0x40	; 64
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	80 68       	ori	r24, 0x80	; 128
    24f6:	8c 93       	st	X, r24
	switch (Config_Ptr -> bit_data)
    24f8:	eb 81       	ldd	r30, Y+3	; 0x03
    24fa:	fc 81       	ldd	r31, Y+4	; 0x04
    24fc:	81 81       	ldd	r24, Z+1	; 0x01
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	3a 87       	std	Y+10, r19	; 0x0a
    2504:	29 87       	std	Y+9, r18	; 0x09
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	87 30       	cpi	r24, 0x07	; 7
    250c:	91 05       	cpc	r25, r1
    250e:	09 f4       	brne	.+2      	; 0x2512 <UART_init+0x54>
    2510:	49 c0       	rjmp	.+146    	; 0x25a4 <UART_init+0xe6>
    2512:	29 85       	ldd	r18, Y+9	; 0x09
    2514:	3a 85       	ldd	r19, Y+10	; 0x0a
    2516:	28 30       	cpi	r18, 0x08	; 8
    2518:	31 05       	cpc	r19, r1
    251a:	5c f4       	brge	.+22     	; 0x2532 <UART_init+0x74>
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	85 30       	cpi	r24, 0x05	; 5
    2522:	91 05       	cpc	r25, r1
    2524:	99 f0       	breq	.+38     	; 0x254c <UART_init+0x8e>
    2526:	29 85       	ldd	r18, Y+9	; 0x09
    2528:	3a 85       	ldd	r19, Y+10	; 0x0a
    252a:	26 30       	cpi	r18, 0x06	; 6
    252c:	31 05       	cpc	r19, r1
    252e:	21 f1       	breq	.+72     	; 0x2578 <UART_init+0xba>
    2530:	7b c0       	rjmp	.+246    	; 0x2628 <UART_init+0x16a>
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	88 30       	cpi	r24, 0x08	; 8
    2538:	91 05       	cpc	r25, r1
    253a:	09 f4       	brne	.+2      	; 0x253e <UART_init+0x80>
    253c:	49 c0       	rjmp	.+146    	; 0x25d0 <UART_init+0x112>
    253e:	29 85       	ldd	r18, Y+9	; 0x09
    2540:	3a 85       	ldd	r19, Y+10	; 0x0a
    2542:	29 30       	cpi	r18, 0x09	; 9
    2544:	31 05       	cpc	r19, r1
    2546:	09 f4       	brne	.+2      	; 0x254a <UART_init+0x8c>
    2548:	59 c0       	rjmp	.+178    	; 0x25fc <UART_init+0x13e>
    254a:	6e c0       	rjmp	.+220    	; 0x2628 <UART_init+0x16a>
	{
		case(5):
			CLEAR_BIT(UCSRC, UCSZ0);
    254c:	a0 e4       	ldi	r26, 0x40	; 64
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e0 e4       	ldi	r30, 0x40	; 64
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	8d 7f       	andi	r24, 0xFD	; 253
    2558:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ1);
    255a:	a0 e4       	ldi	r26, 0x40	; 64
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e0 e4       	ldi	r30, 0x40	; 64
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	8b 7f       	andi	r24, 0xFB	; 251
    2566:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ2);
    2568:	a0 e4       	ldi	r26, 0x40	; 64
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e0 e4       	ldi	r30, 0x40	; 64
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8b 7f       	andi	r24, 0xFB	; 251
    2574:	8c 93       	st	X, r24
    2576:	6d c0       	rjmp	.+218    	; 0x2652 <UART_init+0x194>
			break;

		case (6):
			SET_BIT(UCSRC, UCSZ0);
    2578:	a0 e4       	ldi	r26, 0x40	; 64
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e0 e4       	ldi	r30, 0x40	; 64
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	82 60       	ori	r24, 0x02	; 2
    2584:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ1);
    2586:	a0 e4       	ldi	r26, 0x40	; 64
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e0 e4       	ldi	r30, 0x40	; 64
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	8b 7f       	andi	r24, 0xFB	; 251
    2592:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ2);
    2594:	a0 e4       	ldi	r26, 0x40	; 64
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e0 e4       	ldi	r30, 0x40	; 64
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	8b 7f       	andi	r24, 0xFB	; 251
    25a0:	8c 93       	st	X, r24
    25a2:	57 c0       	rjmp	.+174    	; 0x2652 <UART_init+0x194>
			break;

		case (7):
			CLEAR_BIT(UCSRC, UCSZ0);
    25a4:	a0 e4       	ldi	r26, 0x40	; 64
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e0 e4       	ldi	r30, 0x40	; 64
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	8d 7f       	andi	r24, 0xFD	; 253
    25b0:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    25b2:	a0 e4       	ldi	r26, 0x40	; 64
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e0 e4       	ldi	r30, 0x40	; 64
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	84 60       	ori	r24, 0x04	; 4
    25be:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ2);
    25c0:	a0 e4       	ldi	r26, 0x40	; 64
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e0 e4       	ldi	r30, 0x40	; 64
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	8b 7f       	andi	r24, 0xFB	; 251
    25cc:	8c 93       	st	X, r24
    25ce:	41 c0       	rjmp	.+130    	; 0x2652 <UART_init+0x194>
			break;

		case (8):
			SET_BIT(UCSRC, UCSZ0);
    25d0:	a0 e4       	ldi	r26, 0x40	; 64
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e0 e4       	ldi	r30, 0x40	; 64
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	82 60       	ori	r24, 0x02	; 2
    25dc:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    25de:	a0 e4       	ldi	r26, 0x40	; 64
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e0 e4       	ldi	r30, 0x40	; 64
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	84 60       	ori	r24, 0x04	; 4
    25ea:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ2);
    25ec:	a0 e4       	ldi	r26, 0x40	; 64
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e0 e4       	ldi	r30, 0x40	; 64
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	8b 7f       	andi	r24, 0xFB	; 251
    25f8:	8c 93       	st	X, r24
    25fa:	2b c0       	rjmp	.+86     	; 0x2652 <UART_init+0x194>
			break;

		case (9):
			SET_BIT(UCSRC, UCSZ0);
    25fc:	a0 e4       	ldi	r26, 0x40	; 64
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e0 e4       	ldi	r30, 0x40	; 64
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	82 60       	ori	r24, 0x02	; 2
    2608:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    260a:	a0 e4       	ldi	r26, 0x40	; 64
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e0 e4       	ldi	r30, 0x40	; 64
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	84 60       	ori	r24, 0x04	; 4
    2616:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ2);
    2618:	a0 e4       	ldi	r26, 0x40	; 64
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e0 e4       	ldi	r30, 0x40	; 64
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	84 60       	ori	r24, 0x04	; 4
    2624:	8c 93       	st	X, r24
    2626:	15 c0       	rjmp	.+42     	; 0x2652 <UART_init+0x194>
			break;

		default:
			SET_BIT(UCSRC, UCSZ0);
    2628:	a0 e4       	ldi	r26, 0x40	; 64
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e0 e4       	ldi	r30, 0x40	; 64
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	82 60       	ori	r24, 0x02	; 2
    2634:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    2636:	a0 e4       	ldi	r26, 0x40	; 64
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e0 e4       	ldi	r30, 0x40	; 64
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	84 60       	ori	r24, 0x04	; 4
    2642:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ2);
    2644:	a0 e4       	ldi	r26, 0x40	; 64
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	e0 e4       	ldi	r30, 0x40	; 64
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	8b 7f       	andi	r24, 0xFB	; 251
    2650:	8c 93       	st	X, r24
	}
	
	switch (Config_Ptr -> stop_bit)
    2652:	eb 81       	ldd	r30, Y+3	; 0x03
    2654:	fc 81       	ldd	r31, Y+4	; 0x04
    2656:	80 81       	ld	r24, Z
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	38 87       	std	Y+8, r19	; 0x08
    265e:	2f 83       	std	Y+7, r18	; 0x07
    2660:	8f 81       	ldd	r24, Y+7	; 0x07
    2662:	98 85       	ldd	r25, Y+8	; 0x08
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	31 f0       	breq	.+12     	; 0x2674 <UART_init+0x1b6>
    2668:	2f 81       	ldd	r18, Y+7	; 0x07
    266a:	38 85       	ldd	r19, Y+8	; 0x08
    266c:	21 30       	cpi	r18, 0x01	; 1
    266e:	31 05       	cpc	r19, r1
    2670:	49 f0       	breq	.+18     	; 0x2684 <UART_init+0x1c6>
    2672:	10 c0       	rjmp	.+32     	; 0x2694 <UART_init+0x1d6>
	{
		case (ONE_STOP_BIT):
			CLEAR_BIT(UCSRC, USBS);
    2674:	a0 e4       	ldi	r26, 0x40	; 64
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e0 e4       	ldi	r30, 0x40	; 64
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	87 7f       	andi	r24, 0xF7	; 247
    2680:	8c 93       	st	X, r24
    2682:	0f c0       	rjmp	.+30     	; 0x26a2 <UART_init+0x1e4>
			break;
		case (TWO_STOP_BITS):
			SET_BIT(UCSRC, USBS);
    2684:	a0 e4       	ldi	r26, 0x40	; 64
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e0 e4       	ldi	r30, 0x40	; 64
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	88 60       	ori	r24, 0x08	; 8
    2690:	8c 93       	st	X, r24
    2692:	07 c0       	rjmp	.+14     	; 0x26a2 <UART_init+0x1e4>
			break;
		default :
			CLEAR_BIT(UCSRC, USBS);
    2694:	a0 e4       	ldi	r26, 0x40	; 64
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e0 e4       	ldi	r30, 0x40	; 64
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	87 7f       	andi	r24, 0xF7	; 247
    26a0:	8c 93       	st	X, r24
	}


	switch (Config_Ptr -> parity)
    26a2:	eb 81       	ldd	r30, Y+3	; 0x03
    26a4:	fc 81       	ldd	r31, Y+4	; 0x04
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	3e 83       	std	Y+6, r19	; 0x06
    26ae:	2d 83       	std	Y+5, r18	; 0x05
    26b0:	8d 81       	ldd	r24, Y+5	; 0x05
    26b2:	9e 81       	ldd	r25, Y+6	; 0x06
    26b4:	81 30       	cpi	r24, 0x01	; 1
    26b6:	91 05       	cpc	r25, r1
    26b8:	c1 f0       	breq	.+48     	; 0x26ea <UART_init+0x22c>
    26ba:	2d 81       	ldd	r18, Y+5	; 0x05
    26bc:	3e 81       	ldd	r19, Y+6	; 0x06
    26be:	22 30       	cpi	r18, 0x02	; 2
    26c0:	31 05       	cpc	r19, r1
    26c2:	11 f1       	breq	.+68     	; 0x2708 <UART_init+0x24a>
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f5       	brne	.+90     	; 0x2726 <UART_init+0x268>
	{
		case (NO_PARITY):
			CLEAR_BIT(UCSRC, UPM0);
    26cc:	a0 e4       	ldi	r26, 0x40	; 64
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e0 e4       	ldi	r30, 0x40	; 64
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	8f 7e       	andi	r24, 0xEF	; 239
    26d8:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UPM1);
    26da:	a0 e4       	ldi	r26, 0x40	; 64
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e0 e4       	ldi	r30, 0x40	; 64
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	8f 7d       	andi	r24, 0xDF	; 223
    26e6:	8c 93       	st	X, r24
    26e8:	2c c0       	rjmp	.+88     	; 0x2742 <UART_init+0x284>
			break;
		case (ODD):
			SET_BIT(UCSRC, UPM0);
    26ea:	a0 e4       	ldi	r26, 0x40	; 64
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e0 e4       	ldi	r30, 0x40	; 64
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	80 61       	ori	r24, 0x10	; 16
    26f6:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UPM1);
    26f8:	a0 e4       	ldi	r26, 0x40	; 64
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e0 e4       	ldi	r30, 0x40	; 64
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	80 62       	ori	r24, 0x20	; 32
    2704:	8c 93       	st	X, r24
    2706:	1d c0       	rjmp	.+58     	; 0x2742 <UART_init+0x284>
			break;
		case (EVEN):
			CLEAR_BIT(UCSRC, UPM0);
    2708:	a0 e4       	ldi	r26, 0x40	; 64
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	e0 e4       	ldi	r30, 0x40	; 64
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	8f 7e       	andi	r24, 0xEF	; 239
    2714:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UPM1);
    2716:	a0 e4       	ldi	r26, 0x40	; 64
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e0 e4       	ldi	r30, 0x40	; 64
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	80 62       	ori	r24, 0x20	; 32
    2722:	8c 93       	st	X, r24
    2724:	0e c0       	rjmp	.+28     	; 0x2742 <UART_init+0x284>
			break;
		default :
			CLEAR_BIT(UCSRC, UPM0);
    2726:	a0 e4       	ldi	r26, 0x40	; 64
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e0 e4       	ldi	r30, 0x40	; 64
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	8f 7e       	andi	r24, 0xEF	; 239
    2732:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UPM1);
    2734:	a0 e4       	ldi	r26, 0x40	; 64
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e0 e4       	ldi	r30, 0x40	; 64
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	8f 7d       	andi	r24, 0xDF	; 223
    2740:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr -> baud_rate * 8UL))) - 1);
    2742:	eb 81       	ldd	r30, Y+3	; 0x03
    2744:	fc 81       	ldd	r31, Y+4	; 0x04
    2746:	83 81       	ldd	r24, Z+3	; 0x03
    2748:	94 81       	ldd	r25, Z+4	; 0x04
    274a:	a5 81       	ldd	r26, Z+5	; 0x05
    274c:	b6 81       	ldd	r27, Z+6	; 0x06
    274e:	88 0f       	add	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	aa 1f       	adc	r26, r26
    2754:	bb 1f       	adc	r27, r27
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	aa 1f       	adc	r26, r26
    275c:	bb 1f       	adc	r27, r27
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	aa 1f       	adc	r26, r26
    2764:	bb 1f       	adc	r27, r27
    2766:	9c 01       	movw	r18, r24
    2768:	ad 01       	movw	r20, r26
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	92 e1       	ldi	r25, 0x12	; 18
    276e:	aa e7       	ldi	r26, 0x7A	; 122
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__udivmodsi4>
    277a:	da 01       	movw	r26, r20
    277c:	c9 01       	movw	r24, r18
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	9a 83       	std	Y+2, r25	; 0x02
    2782:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2784:	e0 e4       	ldi	r30, 0x40	; 64
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	89 2f       	mov	r24, r25
    278e:	99 27       	eor	r25, r25
    2790:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2792:	e9 e2       	ldi	r30, 0x29	; 41
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	80 83       	st	Z, r24
}
    279a:	2a 96       	adiw	r28, 0x0a	; 10
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	0f 92       	push	r0
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    27b8:	eb e2       	ldi	r30, 0x2B	; 43
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	80 72       	andi	r24, 0x20	; 32
    27c4:	90 70       	andi	r25, 0x00	; 0
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	b9 f3       	breq	.-18     	; 0x27b8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    27ca:	ec e2       	ldi	r30, 0x2C	; 44
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    27d2:	0f 90       	pop	r0
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    27e2:	eb e2       	ldi	r30, 0x2B	; 43
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	88 23       	and	r24, r24
    27ea:	dc f7       	brge	.-10     	; 0x27e2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    27ec:	ec e2       	ldi	r30, 0x2C	; 44
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
}
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <UART_sendString+0x6>
    27fe:	0f 92       	push	r0
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	9b 83       	std	Y+3, r25	; 0x03
    2806:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2808:	19 82       	std	Y+1, r1	; 0x01
    280a:	0e c0       	rjmp	.+28     	; 0x2828 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	28 2f       	mov	r18, r24
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	9b 81       	ldd	r25, Y+3	; 0x03
    2816:	fc 01       	movw	r30, r24
    2818:	e2 0f       	add	r30, r18
    281a:	f3 1f       	adc	r31, r19
    281c:	80 81       	ld	r24, Z
    281e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <UART_sendByte>
		i++;
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	8f 5f       	subi	r24, 0xFF	; 255
    2826:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	28 2f       	mov	r18, r24
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	9b 81       	ldd	r25, Y+3	; 0x03
    2832:	fc 01       	movw	r30, r24
    2834:	e2 0f       	add	r30, r18
    2836:	f3 1f       	adc	r31, r19
    2838:	80 81       	ld	r24, Z
    283a:	88 23       	and	r24, r24
    283c:	39 f7       	brne	.-50     	; 0x280c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	cf 91       	pop	r28
    2846:	df 91       	pop	r29
    2848:	08 95       	ret

0000284a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	00 d0       	rcall	.+0      	; 0x2854 <UART_receiveString+0xa>
    2854:	0f 92       	push	r0
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	9b 83       	std	Y+3, r25	; 0x03
    285c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    285e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	9b 81       	ldd	r25, Y+3	; 0x03
    286a:	8c 01       	movw	r16, r24
    286c:	02 0f       	add	r16, r18
    286e:	13 1f       	adc	r17, r19
    2870:	0e 94 ed 13 	call	0x27da	; 0x27da <UART_recieveByte>
    2874:	f8 01       	movw	r30, r16
    2876:	80 83       	st	Z, r24
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	8f 5f       	subi	r24, 0xFF	; 255
    287e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	8a 81       	ldd	r24, Y+2	; 0x02
    2888:	9b 81       	ldd	r25, Y+3	; 0x03
    288a:	8c 01       	movw	r16, r24
    288c:	02 0f       	add	r16, r18
    288e:	13 1f       	adc	r17, r19
    2890:	0e 94 ed 13 	call	0x27da	; 0x27da <UART_recieveByte>
    2894:	f8 01       	movw	r30, r16
    2896:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	9b 81       	ldd	r25, Y+3	; 0x03
    28a2:	fc 01       	movw	r30, r24
    28a4:	e2 0f       	add	r30, r18
    28a6:	f3 1f       	adc	r31, r19
    28a8:	80 81       	ld	r24, Z
    28aa:	83 32       	cpi	r24, 0x23	; 35
    28ac:	31 f7       	brne	.-52     	; 0x287a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	9b 81       	ldd	r25, Y+3	; 0x03
    28b8:	fc 01       	movw	r30, r24
    28ba:	e2 0f       	add	r30, r18
    28bc:	f3 1f       	adc	r31, r19
    28be:	10 82       	st	Z, r1
}
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	1f 91       	pop	r17
    28cc:	0f 91       	pop	r16
    28ce:	08 95       	ret

000028d0 <__udivmodsi4>:
    28d0:	a1 e2       	ldi	r26, 0x21	; 33
    28d2:	1a 2e       	mov	r1, r26
    28d4:	aa 1b       	sub	r26, r26
    28d6:	bb 1b       	sub	r27, r27
    28d8:	fd 01       	movw	r30, r26
    28da:	0d c0       	rjmp	.+26     	; 0x28f6 <__udivmodsi4_ep>

000028dc <__udivmodsi4_loop>:
    28dc:	aa 1f       	adc	r26, r26
    28de:	bb 1f       	adc	r27, r27
    28e0:	ee 1f       	adc	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	a2 17       	cp	r26, r18
    28e6:	b3 07       	cpc	r27, r19
    28e8:	e4 07       	cpc	r30, r20
    28ea:	f5 07       	cpc	r31, r21
    28ec:	20 f0       	brcs	.+8      	; 0x28f6 <__udivmodsi4_ep>
    28ee:	a2 1b       	sub	r26, r18
    28f0:	b3 0b       	sbc	r27, r19
    28f2:	e4 0b       	sbc	r30, r20
    28f4:	f5 0b       	sbc	r31, r21

000028f6 <__udivmodsi4_ep>:
    28f6:	66 1f       	adc	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	88 1f       	adc	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	1a 94       	dec	r1
    2900:	69 f7       	brne	.-38     	; 0x28dc <__udivmodsi4_loop>
    2902:	60 95       	com	r22
    2904:	70 95       	com	r23
    2906:	80 95       	com	r24
    2908:	90 95       	com	r25
    290a:	9b 01       	movw	r18, r22
    290c:	ac 01       	movw	r20, r24
    290e:	bd 01       	movw	r22, r26
    2910:	cf 01       	movw	r24, r30
    2912:	08 95       	ret

00002914 <__prologue_saves__>:
    2914:	2f 92       	push	r2
    2916:	3f 92       	push	r3
    2918:	4f 92       	push	r4
    291a:	5f 92       	push	r5
    291c:	6f 92       	push	r6
    291e:	7f 92       	push	r7
    2920:	8f 92       	push	r8
    2922:	9f 92       	push	r9
    2924:	af 92       	push	r10
    2926:	bf 92       	push	r11
    2928:	cf 92       	push	r12
    292a:	df 92       	push	r13
    292c:	ef 92       	push	r14
    292e:	ff 92       	push	r15
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	ca 1b       	sub	r28, r26
    293e:	db 0b       	sbc	r29, r27
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	09 94       	ijmp

0000294c <__epilogue_restores__>:
    294c:	2a 88       	ldd	r2, Y+18	; 0x12
    294e:	39 88       	ldd	r3, Y+17	; 0x11
    2950:	48 88       	ldd	r4, Y+16	; 0x10
    2952:	5f 84       	ldd	r5, Y+15	; 0x0f
    2954:	6e 84       	ldd	r6, Y+14	; 0x0e
    2956:	7d 84       	ldd	r7, Y+13	; 0x0d
    2958:	8c 84       	ldd	r8, Y+12	; 0x0c
    295a:	9b 84       	ldd	r9, Y+11	; 0x0b
    295c:	aa 84       	ldd	r10, Y+10	; 0x0a
    295e:	b9 84       	ldd	r11, Y+9	; 0x09
    2960:	c8 84       	ldd	r12, Y+8	; 0x08
    2962:	df 80       	ldd	r13, Y+7	; 0x07
    2964:	ee 80       	ldd	r14, Y+6	; 0x06
    2966:	fd 80       	ldd	r15, Y+5	; 0x05
    2968:	0c 81       	ldd	r16, Y+4	; 0x04
    296a:	1b 81       	ldd	r17, Y+3	; 0x03
    296c:	aa 81       	ldd	r26, Y+2	; 0x02
    296e:	b9 81       	ldd	r27, Y+1	; 0x01
    2970:	ce 0f       	add	r28, r30
    2972:	d1 1d       	adc	r29, r1
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	ed 01       	movw	r28, r26
    2980:	08 95       	ret

00002982 <_exit>:
    2982:	f8 94       	cli

00002984 <__stop_program>:
    2984:	ff cf       	rjmp	.-2      	; 0x2984 <__stop_program>
